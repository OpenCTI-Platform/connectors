opencti:
  url: 'http://localhost:8080'
  token: 'ChangeMe'

connector:
  id: 'ChangeMe'
  type: 'Template_Type'
  name: 'Template'
  scope: 'Template_Scope' # MIME type or SCO
  confidence_level: 100 # From 0 (Unknown) to 100 (Fully trusted)
  log_level: 'info'

webhook:
  graphql_polling_interval: 5 # In seconds. How often the connector polls the GraphQL API to look for changes.
  graphql_query: '
    {{ works(
        filters:[
          {{
            key:completed_time,
            operator:"gt",
            values:[
              "LAST_POLL_TIME"
            ]
          }}
        ]
      )
      {{
        edges
          {{
            node
              {{
                event_source_id
              }}
          }}
      }}
    }} ' # The query to make to the GraphQL endpoint. The GraphQL query should include a time filter aspect to it to ensure that results coming back are only new since the last poll. The variable 'LAST_POLL_TIME' in the query string will be replaced with the time of the last successfully executed poll in epoch milliseconds. The query is evaluated as a python format string before being queried so that complex logic can be included in the query; because of this, use single curly braces ( { ) for python interpretation and double curly braces for GraphQL interpretation ( {{ ). GraphQL also requires double quotes ( " ) be used for declarations.
  graphql_returned_data_location: "['data']['works']['edges']" # Where to look for data in a successfully returned query. If the data does not exist or returns an empty array/string, the connector will ignore it. Use single quotes ( ' ) for string declarations.
  url: "http://localhost?id={item['node']['event_source_id']}" # The URL to call when returned data is successfully found. The connector will iterate through a returned data array or single piece of data from the WEBHOOK_GRAPHQL_RETURNED_DATA_LOCATION variable with callable data variable named "item". The url is evaluated as a python format string before being called so that complex logic can be included in the call; because of this, use single curly braces ( { ) for python interpretation and double curly braces ( {{ ) for a single curly brace literal ( { ). Use single quotes ( ' ) for string declarations.
  unsuccessful_retry_interval: 5 # In seconds. If the webhook call is unsuccessful, retry after this many seconds
  unsuccessful_retry_attempts: 5 # If the webhook call is unsuccessful, retry no more than this many times.
  ignore_duplicates: true # If duplicate webhook calls exist in the poll, only call each once.