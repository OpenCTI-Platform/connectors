"""Malware."""

from connectors_sdk.models.base_identified_entity import BaseIdentifiedEntity
from connectors_sdk.models.enums import (
    ImplementationLanguage,
    MalwareCapability,
    MalwareType,
    ProcessorArchitecture,
)
from connectors_sdk.models.kill_chain_phase import KillChainPhase
from pycti import Malware as PyctiMalware
from pydantic import AwareDatetime, Field
from stix2.v21 import Malware as Stix2Malware


class Malware(BaseIdentifiedEntity):
    """Represent a malware entity."""

    name: str = Field(
        description="Name of the malware.",
        min_length=1,
    )
    is_family: bool = Field(
        description="Is the malware a family?",
    )
    description: str | None = Field(
        default=None,
        description="Description of the malware.",
    )
    aliases: list[str] | None = Field(
        default=None,
        description="Alternative names used to identify this malware or malware family.",
    )
    types: list[MalwareType] | None = Field(
        default=None,
        description="Types of the malware.",
    )
    first_seen: AwareDatetime | None = Field(
        default=None,
        description="The time that this Malware was first seen.",
    )
    last_seen: AwareDatetime | None = Field(
        default=None,
        description="The time that this Malware was last seen.",
    )
    architecture_execution_envs: list[ProcessorArchitecture] | None = Field(
        default=None,
        description="Architecture execution environment of the malware.",
    )
    implementation_languages: list[ImplementationLanguage] | None = Field(
        default=None,
        description="Implementation languages of the malware.",
    )
    kill_chain_phases: list[KillChainPhase] | None = Field(
        default=None,
        description="Kill chain phases of the malware.",
    )
    capabilities: list[MalwareCapability] | None = Field(
        default=None,
        description="Any of the capabilities identified for the malware instance or family.",
    )

    def to_stix2_object(self) -> Stix2Malware:
        """Make stix object."""
        return Stix2Malware(
            id=PyctiMalware.generate_id(name=self.name),
            name=self.name,
            is_family=self.is_family,
            description=self.description,
            aliases=self.aliases,
            malware_types=self.types,
            first_seen=self.first_seen,
            last_seen=self.last_seen,
            architecture_execution_envs=self.architecture_execution_envs,
            implementation_languages=self.implementation_languages,
            kill_chain_phases=[
                kill_chain_phase.to_stix2_object()
                for kill_chain_phase in self.kill_chain_phases or []
            ],
            capabilities=self.capabilities,
            external_references=[
                external_reference.to_stix2_object()
                for external_reference in self.external_references or []
            ],
            created_by_ref=self.author.id if self.author else None,
            object_marking_refs=[marking.id for marking in self.markings or []],
            operating_system_refs=None,  # not implemented on OpenCTI
            sample_refs=None,  # not implemented on OpenCTI
        )
