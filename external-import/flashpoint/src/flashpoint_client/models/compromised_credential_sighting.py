from datetime import datetime
from typing import Literal

from pydantic import AliasPath, BaseModel, ConfigDict, Field


class FrozenBaseModel(BaseModel):
    model_config = ConfigDict(
        extra="allow",
        frozen=True,
    )


class Geopoint(FrozenBaseModel):
    lat: float | None = Field(
        description="Geopoint latitude",
    )
    lon: float | None = Field(
        description="Geopoint longitude",
    )


class Location(FrozenBaseModel):
    accuracy_radius: int | None = Field(
        description="Accuracy radius in kilometers around the latitude and longitude",
        default=None,
    )
    city_name: str | None = Field(
        description="City name",
        default=None,
    )
    continent_name: str | None = Field(
        description="Continent name",
        default=None,
    )
    country_name: str | None = Field(
        description="Country name",
        default=None,
    )
    latitude: float | None = Field(
        description="Latitude element of the Global Positioning System (GPS) coordinates",
        default=None,
    )
    location: Geopoint | None = Field(
        description="Separate latitude/longitude object for performing efficient geopoint search",
        default=None,
    )
    longitude: float | None = Field(
        description="Longitude element of the GPS coordinates",
        default=None,
    )
    subdivision_1_name: str | None = Field(
        description="Subdivision 1 (e.g., state)",
        default=None,
    )
    subdivision_2_name: str | None = Field(
        description="Subdivision 2 (e.g., county)",
        default=None,
    )


class Malware(FrozenBaseModel):
    family: str | None = Field(
        description="Name of the malware family used to infiltrate infected host",
        default=None,
    )
    scanned_at: datetime | None = Field(
        description="Time that the malware scanned the infected machine",
        validation_alias=AliasPath("scanned_at", "date-time"),
        default=None,
    )
    version: str | None = Field(
        description="Version of the malware family used to infiltrate infected host",
        default=None,
    )


class MachineExtraInfo(FrozenBaseModel):
    key: str = Field(
        description="Key of the extra information",
    )
    value: str = Field(
        description="Value of the extra information",
    )


class Machine(FrozenBaseModel):
    language: list[str] = Field(
        description="List of languages configured on the infected host",
        default=[],
    )
    extra: list[MachineExtraInfo] = Field(
        description="Extra information about the host machine that isn't captured elsewhere",
        default=[],
    )
    user: str | None = Field(
        description="Local username configured on infected host",
        default=None,
    )
    os: str | None = Field(
        description="Operating System (OS)",
        default=None,
    )
    architecture: str | None = Field(
        description="System architecture (e.g., x64)",
        default=None,
    )
    cpu: list[str] = Field(
        description="List of Central Processing Units (CPUs)",
        default=[],
    )
    ram: str | None = Field(
        description="Random Access Memory (RAM)",
        default=None,
    )
    resolution: str | None = Field(
        description="Display resolution on infected host measured in pixels",
        default=None,
    )
    gpu: list[str] = Field(
        description="List of Graphics Processing Units (GPUs)",
        default=[],
    )


class InternetServiceProvider(FrozenBaseModel):
    connection_type: str | None = Field(
        description="ISP connection type",
        default=None,
    )
    isp: str | None = Field(
        description="ISP name",
        default=None,
    )
    organization: str | None = Field(
        description="ISP organization",
        default=None,
    )
    autonomous_system_organization: str | None = Field(
        description="ISP Autonomous System (AS) organization",
        default=None,
    )
    autonomous_system_number: int | None = Field(
        description="Autonomous System Number (ASN) used to control routing",
        default=None,
    )


class InstalledSoftware(FrozenBaseModel):
    name: str = Field(
        description="Name of the installed software",
    )
    version: str | None = Field(
        description="Version of the installed software",
        default=None,
    )


class InfectedHost(FrozenBaseModel):
    fpid: str = Field(
        description="Unique Flashpoint ID for the infected host",
    )
    host_id: str | None = Field(
        description="A string representing the infected host machine, generated by the malware",
        default=None,
    )
    installed_software: list[InstalledSoftware] = Field(
        description="List of installed software objects on the infected host",
        default=[],
    )
    ip: str | None = Field(
        description="Unique IP address that identifies a device on the network, ipv4 or ipv6",
        default=None,
    )
    ipv4: str | None = Field(
        description="IP address in ipv4 format, if applicable",
        default=None,
    )
    ipv6: str | None = Field(
        description="IP address in ipv6 format, if applicable",
        default=None,
    )
    location: Location | None = Field(
        description="Approximate location, calculated by Flashpoint based on the IP address",
        default=None,
    )
    malware: Malware | None = Field(
        description="Malware information",
        default=None,
    )
    machine: Machine | None = Field(
        description="System configurations",
        default=None,
    )
    isp: InternetServiceProvider | None = Field(
        description="Internet Service Provider (ISP) data, calculated by Flashpoint",
        default=None,
    )


class Header(FrozenBaseModel):
    indexed_at: datetime | None = Field(
        description="When this document was indexed into the database.",
        default=None,
    )


class PasswordComplexity(FrozenBaseModel):
    has_lowercase: bool | None = Field(
        description="True if lowercase letters are present",
        default=None,
    )
    has_number: bool | None = Field(
        description="True if numbers are present",
        default=None,
    )
    has_symbol: bool | None = Field(
        description="True if symbols are present",
        default=None,
    )
    has_uppercase: bool | None = Field(
        description="True if uppercase letters are present",
        default=None,
    )
    length: int | None = Field(
        description="Number of characters in the password",
        default=None,
    )
    probable_hash_algorithms: list[str] | None = Field(
        description="List of suspected hash algorithms (e.g., MD5, SHA-1, bcrypt)",
        default=None,
    )


class Cookie(FrozenBaseModel):
    allow_subdomains: bool = Field(
        description="Flag indicating whether the cookie can be used by subdomains",
    )
    affected_domain: str = Field(
        description="Domain element of the URL that the cookie is associated with",
    )
    key: str = Field(
        description="Key of key/value pair that specifies where the cookie is to be sent and what data to recall",
    )
    path: str = Field(
        description="Path element that must exist in the requested URL for the browser to send the cookie",
    )
    value: str = Field(
        description="Value of key/value pair that specifies where the cookie is to be sent and what data to recall",
    )


class Breach(FrozenBaseModel):
    basetypes: list[Literal["breach"]] = ["breach"]

    header: Header | None = Field(
        validation_alias="_header",
        description="The breach header object",
        default=None,
    )
    breach_type: str | None = Field(
        description='Constant for future use ("credential")',
        default=None,
    )
    created_at: datetime | None = Field(
        description="Datetime breach was created",
        default=None,
        validation_alias=AliasPath("created_at", "date-time"),
    )
    first_observed_at: datetime | None = Field(
        description="Datetime breach was first observed by Flashpoint",
        default=None,
        validation_alias=AliasPath("first_observed_at", "date-time"),
    )
    fpid: str = Field(
        description="Flashpoint ID of the breach",
    )
    source: str | None = Field(
        description="Source where the dump was found",
        default=None,
    )
    source_type: str | None = Field(
        description="Data source of breach (e.g., Analyst Research, Paste, VirusTotal)",
        default=None,
    )
    title: str | None = Field(
        description="Title of breach",
        default=None,
    )


class CompromisedCredentialSighting(FrozenBaseModel):
    basetypes: list[Literal["credential-sighting"]] = ["credential-sighting"]

    affected_domain: str | None = Field(
        description="Domain object extracted from the affected URL",
        default=None,
    )
    affected_url: str | None = Field(
        description="Affected URL for the compromised credential",
        default=None,
    )
    body: str = Field(
        description="Raw content captured from the breach",
        validation_alias=AliasPath("body", "raw"),
    )
    breach: Breach = Field(
        description="Breach object in which this credential was found",
    )
    cookies: list[Cookie] | None = Field(
        description="List of cookies associated with this credential",
        default=[],
    )
    credential_record_fpid: str = Field(
        description="Flashpoint ID of the associated credential record",
    )
    domain: str | None = Field(
        description="Domain extracted from the email address",
        default=None,
    )
    email: str | None = Field(
        description="Username (email-formatted) recorded for backwards compatibility",
        default=None,
    )
    fpid: str = Field(
        description="Flashpoint ID of this credential object",
    )
    has_plaintext_recovered: bool | None = Field(
        description="True if plaintext password was recovered from a hash",
        default=None,
    )
    header: Header = Field(
        description="Header object for this credential",
        validation_alias="header_",
    )
    infected_host: InfectedHost | None = Field(
        description="Infected host attributes (if available)",
        validation_alias="infected_host_attributes",
        default=None,
    )
    is_fresh: bool = Field(
        description="True if the credential has not been seen before and is not marked 'not fresh'",
    )
    last_observed_at: datetime | None = Field(
        description="Most recent date the credential was seen",
        validation_alias=AliasPath("last_observed_at", "date-time"),
        default=None,
    )
    original_password: str | None = Field(
        description="Original hash value if password was cracked",
        default=None,
    )
    password: str = Field(
        description="Plaintext password (if available)",
    )
    password_complexity: PasswordComplexity = Field(
        description="Object describing password characteristics",
    )
    times_seen: int = Field(
        description="Number of times this credential has been observed",
    )
    username: str = Field(
        description="Username/login for the compromised credential",
    )
