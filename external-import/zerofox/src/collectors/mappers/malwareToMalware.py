from typing import List, Union

from stix2 import URL, File, Indicator
from stix2 import Malware as stixMalware
from stix2 import Relationship
from stix2.v21.vocab import PATTERN_TYPE_STIX
from zerofox.domain.malware import Malware


def malware_to_malware(
    now: str, entry: Malware
) -> List[Union[URL, File, Indicator, Relationship, stixMalware]]:
    urls = [URL(value=c2) for c2 in entry.c2] if entry.c2 else []
    malware_families = (
        [stixMalware(name=family, is_family=True) for family in entry.family]
        if entry.family
        else []
    )
    present_hashes = {}

    if entry.sha512:
        present_hashes["SHA-512"] = entry.sha512
    if entry.sha1:
        present_hashes["SHA-1"] = entry.sha1
    if entry.md5:
        present_hashes["MD5"] = entry.md5

    file = File(
        name=entry.sha256,
        hashes={
            "SHA-256": entry.sha256,
        }
        | present_hashes,
    )

    pattern_string = f"[file:hashes.'SHA-256' = '{entry.sha256}'"
    for k, v in present_hashes.items():
        pattern_string += f" OR file:hashes.'{k}' = '{v}'"
    pattern_string += "]"

    indicator = Indicator(
        name=entry.sha256,
        pattern_type=PATTERN_TYPE_STIX,
        pattern=pattern_string,
    )

    file_indicator_rel = Relationship(
        source_ref=indicator.id, target_ref=file.id, relationship_type="based-on"
    )

    malware_indicators_rel = (
        [
            Relationship(
                source_ref=indicator.id,
                target_ref=family.id,
                relationship_type="indicates",
            )
            for family in malware_families
        ]
        if malware_families
        else []
    )

    return (
        urls
        + malware_families
        + malware_indicators_rel
        + [file_indicator_rel]
        + [file]
        + [indicator]
    )
