from typing import List, Union

from open_cti import indicator, malware, observable, relationship
from stix2 import URL, File, Indicator
from stix2 import Malware as stixMalware
from stix2 import Relationship
from stix2.v21.vocab import PATTERN_TYPE_STIX
from zerofox.domain.malware import FoxMalware


def malware_to_malware(
    created_by, _: str, entry: FoxMalware
) -> List[Union[URL, File, Indicator, Relationship, stixMalware]]:
    """
    Based on a ZeroFox Malware object, creates the following STIX objects:
        - A File object for the hashes presenof the malware
        - A set of URL observables on each of the C2 URLs associated with the malware
        - A set of Malware family objects for each of the malware families associated with the malware entry
        - An Indicator observable object pointing the file hash to each of the malware families it is based on
    """
    urls = (
        [observable(created_by=created_by, cls=URL, value=c2) for c2 in entry.c2]
        if entry.c2
        else []
    )
    malware_families = (
        [malware(created_by=created_by, name=family) for family in entry.family]
        if entry.family
        else []
    )
    present_hashes = _build_file_hashes(entry)

    file = observable(
        created_by=created_by,
        cls=File,
        name=entry.sha256,
        hashes={
            "SHA-256": entry.sha256,
        }
        | present_hashes,
    )

    pattern_string = _build_pattern(entry, present_hashes)

    indic = indicator(
        created_by=created_by,
        name=f"{entry.sha256}",
        pattern_type=PATTERN_TYPE_STIX,
        pattern=pattern_string,
        valid_from=entry.created_at,
        indicator_types=["malicious-activity"],
        observable_type="StixFile",
    )

    file_indicator_rel = relationship(source=indic.id, target=file.id, type="based-on")

    malware_indicators_rel = (
        [
            relationship(
                source=indic.id,
                target=family.id,
                type="indicates",
            )
            for family in malware_families
        ]
        if malware_families
        else []
    )

    return (
        urls
        + malware_families
        + malware_indicators_rel
        + [file_indicator_rel]
        + [file]
        + [indic]
    )


def _build_pattern(entry, present_hashes):
    pattern_string = f"[file:hashes.'SHA-256' = '{entry.sha256}'"
    for k, v in present_hashes.items():
        pattern_string += f" OR file:hashes.'{k}' = '{v}'"
    pattern_string += "]"
    return pattern_string


def _build_file_hashes(entry):
    present_hashes = {}

    if entry.sha512:
        present_hashes["SHA-512"] = entry.sha512
    if entry.sha1:
        present_hashes["SHA-1"] = entry.sha1
    if entry.md5:
        present_hashes["MD5"] = entry.md5
    return present_hashes
