from typing import List, Union

import pycti
import stix2
from open_cti import observable
from pycti import StixCoreRelationship
from stix2 import File, Indicator, Relationship
from open_cti import indicator, malware, observable
from stix2 import File, Indicator
from stix2 import Malware as stixMalware
from stix2 import Relationship
from stix2.v21.vocab import PATTERN_TYPE_STIX
from zerofox.domain.ransomware import Ransomware


def ransomware_to_malware(
    created_by, now: str, entry: Ransomware
) -> List[Union[Relationship, Indicator, File, stix2.Malware]]:
    """
    Based on a ZeroFox Ransomware object, creates the following STIX objects:
        - A File object for the hashes present of the ransomware
        - A Malware object for the ransomware
        - An Indicator observable object pointing the file hash to the ransomware
    """
    ransomware_name = ""
    family = False

    if entry.ransomware_name and len(entry.ransomware_name) > 0:
        ransomware_name = entry.ransomware_name[0]
        family = True
    else:
        ransomware_name = entry.sha256

    malware_entry = malware(
        id=pycti.Malware.generate_id(ransomware_name),
        name=f"{ransomware_name}",
        description=f"```{entry.ransom_note}```",
        labels=[tag for tag in entry.tags if not tag.startswith("family:")],
        first_seen=entry.created_at,
        created=now,
        malware_types="ransomware",
        is_family=family,
        created_by_ref=created_by,
    )

    present_hashes = {}

    if entry.sha512:
        present_hashes["SHA-512"] = entry.sha512
    if entry.sha1:
        present_hashes["SHA-1"] = entry.sha1
    if entry.md5:
        present_hashes["MD5"] = entry.md5

    file = observable(
        created_by=created_by,
        cls=File,
        name=entry.sha256,
        hashes={
            "SHA-256": entry.sha256,
        }
        | present_hashes,
    )

    pattern_string = f"[file:hashes.'SHA-256' = '{entry.sha256}'"
    for k, v in present_hashes.items():
        pattern_string += f" OR file:hashes.'{k}' = '{v}'"
    pattern_string += "]"

    indic = indicator(
        id=pycti.Indicator.generate_id(pattern_string),
        created_by_ref=created_by,
        name=f"Pattern for ransomware {entry.sha256}",
        pattern=pattern_string,
        pattern_type=PATTERN_TYPE_STIX,
        valid_from=entry.created_at,
        indicator_types=["malicious-activity"],
    )

    file_indicator_rel = Relationship(
        id=StixCoreRelationship.generate_id("based-on", indicator.id, file.id),
        source_ref=indicator.id,
        target_ref=file.id,
        relationship_type="based-on",
    )

    malware_indicators_rel = Relationship(
        id=StixCoreRelationship.generate_id("indicates", indicator.id, malware.id),
        source_ref=indicator.id,
        target_ref=malware.id,
        relationship_type="indicates",
    )

    return (
        [malware_entry]
        + [file]
        + [indic]
        + [file_indicator_rel]
        + [malware_indicators_rel]
    )
