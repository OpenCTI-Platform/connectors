from typing import List, Union

from stix2 import File, Indicator
from stix2 import Malware as stixMalware
from stix2 import Relationship
from stix2.v21.vocab import PATTERN_TYPE_STIX
from zerofox.domain.ransomware import Ransomware


def ransomware_to_malware(
    now: str, entry: Ransomware
) -> List[Union[Relationship, Indicator, File, stixMalware]]:
    ransomware_name = ""
    family = False

    if entry.ransomware_name and len(entry.ransomware_name) > 0:
        ransomware_name = entry.ransomware_name[0]
        family = True
    else:
        ransomware_name = entry.sha256

    malware = stixMalware(
        name=f"{ransomware_name}",
        description=f"```{entry.ransom_note}```",
        labels=entry.tags,
        first_seen=entry.created_at,
        created=now,
        malware_types="ransomware",
        is_family=family,
    )

    present_hashes = {}

    if entry.sha512:
        present_hashes["SHA-512"] = entry.sha512
    if entry.sha1:
        present_hashes["SHA-1"] = entry.sha1
    if entry.md5:
        present_hashes["MD5"] = entry.md5

    file = File(
        name=entry.sha256,
        hashes={
            "SHA-256": entry.sha256,
        }
        | present_hashes,
    )

    pattern_string = f"[file:hashes.'SHA-256' = '{entry.sha256}'"
    for k, v in present_hashes.items():
        pattern_string += f" OR file:hashes.'{k}' = '{v}'"
    pattern_string += "]"

    indicator = Indicator(
        name=entry.sha256,
        pattern_type=PATTERN_TYPE_STIX,
        pattern=pattern_string,
    )

    file_indicator_rel = Relationship(
        source_ref=indicator.id, target_ref=file.id, relationship_type="based-on"
    )

    malware_indicators_rel = Relationship(
        source_ref=indicator.id,
        target_ref=malware.id,
        relationship_type="indicates",
    )

    return (
        [malware]
        + [file]
        + [indicator]
        + [file_indicator_rel]
        + [malware_indicators_rel]
    )
