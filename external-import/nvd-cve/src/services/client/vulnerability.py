import math
import time

from .api import CVEClient


class CVEVulnerability(CVEClient):
    def get_vulnerabilities(self, cve_params=None) -> list:
        """
        Get and filter CVE with scoring system V3
        :param cve_params: Dict of params
        :return: A list of dicts of CVE
        """

        cve_collection = self.get_complete_collection(cve_params)

        if cve_collection is None:
            raise Exception("Attempting to retrieve data...")

        page_size = cve_collection["resultsPerPage"]
        cve_vulnerabilities_total = []
        total_items = cve_collection["totalResults"]

        if page_size == 0:
            msg = f"[API] No Vulnerabilities to retrieve..."
            self.helper.log_info(msg)
        else:
            start_index = 0
            current_page = 1
            total_page = math.ceil(total_items / page_size)

            msg = f"[API] Start pagination..."
            self.helper.log_info(msg)

            while start_index < total_items:
                cve_params.update(
                    {"startIndex": start_index, "resultsPerPage": page_size}
                )

                cve_collection = self.get_complete_collection(cve_params)

                page_msg = (
                    f"[API] Retrieve CVE from page {current_page} out of {total_page}"
                )
                self.helper.log_info(page_msg)

                cve_vulnerabilities = cve_collection["vulnerabilities"]
                cve_vulnerabilities_filtered = []

                page_size = cve_collection["resultsPerPage"]
                start_index = start_index + page_size + 1
                current_page += 1

                for cve_vulnerability in cve_vulnerabilities:
                    metric_exist = cve_vulnerability["cve"]["metrics"]
                    if metric_exist:
                        for key, value in metric_exist.items():
                            if key == "cvssMetricV31":
                                cve_vulnerabilities_filtered.append(cve_vulnerability)

                info_msg = (
                    f"[API] Getting {len(cve_vulnerabilities_filtered)} vulnerabilities"
                )

                # It is recommended that users "sleep" their scripts for six seconds between requests (NIST)
                time.sleep(6)

                self.helper.log_info(info_msg)
                cve_vulnerabilities_total += cve_vulnerabilities_filtered

            info_msg = (
                f"[API] All CVEs are retrieved. "
                f"Getting {len(cve_vulnerabilities_total)} vulnerabilities in total"
            )
            self.helper.log_info(info_msg)

        return cve_vulnerabilities_total
