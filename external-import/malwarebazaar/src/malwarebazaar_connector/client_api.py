"""
MalwareBazaar is a platform from abuse.ch and Spamhaus, dedicated to sharing malware samples with the infosec
community, antivirus vendors, and threat intelligence providers.

This connector will communicate with the Malware Bazaar API and pull data into OpenCTI.

In order to interact with the MalwareBazaar API, you need to obtain an Auth-Key first.
If you don't have one you can get one for free here:
        https://bazaar.abuse.ch/api/#auth_key

MalwareBazaar API is rate Limited to restrict the number of file downloads on our file download API
to 2,000 per IP address/day.
        https://bazaar.abuse.ch/faq/#api-limit
"""

import requests


class ConnectorClient:
    def __init__(self, helper, config):
        """
        Represent MalwareBazaar API client interface.
        """
        self.helper = helper
        self.config = config

        # Define headers in session and update when needed
        headers = {"Bearer": self.config.api_key}
        self.session = requests.Session()
        self.session.headers.update(headers)

    def _request_data(self, api_url: str, params=None):
        """
        Internal method to handle API requests
        :return: Response in JSON format
        """
        try:
            response = self.session.get(api_url, params=params)

            self.helper.connector_logger.info(
                "[API] HTTP Get Request to endpoint", {"url_path": api_url}
            )

            response.raise_for_status()
            return response

        except requests.RequestException as err:
            error_msg = "[API] Error while fetching data: "
            self.helper.connector_logger.error(
                error_msg, {"url_path": {api_url}, "error": {str(err)}}
            )
            return None

    def get_entities(self, params=None) -> dict:
        """
        Get recent additions to MalwareBazaar.

        See https://bazaar.abuse.ch/api/#latest_additions

        returns: a dict containing the recent additions in the last 60 minutes to MalwareBazaar.
        """
        try:
            return_data = []
            data = {"query": "get_recent", "selector": "time"}
            # Auth-Key not required for the 'get_recent' query for Malware Bazaar
            # headers = {"Auth-Key": params["API_KEY"]}
            headers = {}
            resp = requests.post(
                params["API_BASE_URL"], data=data, timeout=15, headers=headers
            )

            # Handle the response data
            recent_additions_list = resp.json()
            if "data" in recent_additions_list:
                return_data = recent_additions_list["data"]
            else:
                self.helper.log_error(
                    f"Key 'data' not found in the response from MalwareBazaar API. Did you set your API_KEY? {resp.json()} Auth-Key: {params['API_KEY']}"
                )

            return return_data

        except Exception as err:
            self.helper.connector_logger.error(err)
