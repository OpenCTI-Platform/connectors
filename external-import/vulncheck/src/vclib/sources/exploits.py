from datetime import datetime

# from vclib.connector import ConnectorVulnCheck


def collect_exploits(conn, config_state: dict) -> list:
    """Collect all data for the botnets source

    Args:
        conn (ConnectorVulnCheck): The VulnCheck connector

    Returns:
        list: A list of STIX objects
    """
    conn.helper.connector_logger.info("[EXPLOITS] Starting collection")
    entities = conn.client.get_exploits()
    stix_objects = []

    conn.helper.connector_logger.info("[EXPLOITS] Parsing data into STIX objects")
    for entity in entities:
        conn.helper.connector_logger.debug(
            "[EXPLOITS] Creating vulnerability",
            {"vulnerability": entity.id},
        )

        custom_properties = {}

        if entity.epss is not None:
            custom_properties = {
                "x_opencti_cisa_kev": entity.in_kev,
                "x_opencti_epss_score": entity.epss.epss_score,
                "x_opencti_epss_percentile": entity.epss.epss_percentile,
            }
        else:
            custom_properties = {
                "x_opencti_cisa_kev": entity.in_kev,
            }
        vuln = conn.converter_to_stix.create_vulnerability(
            cve=entity.id, custom_properties=custom_properties
        )
        stix_objects.append(vuln)

        if entity.exploits is not None:
            for exploit in entity.exploits:
                conn.helper.connector_logger.debug(
                    "[EXPLOITS] Creating malware object from exploit",
                    {"exploit_url": exploit.url},
                )
                malware = conn.converter_to_stix.create_malware(
                    name=exploit.url,
                    description=f"{exploit.url}\n\n{exploit.name}",
                    is_family=False,
                    first_seen=datetime.fromisoformat(exploit.date_added),
                )

                conn.helper.connector_logger.debug(
                    '[EXPLOITS] Creating "exploits" relationship',
                )
                malware_vuln_relationship = conn.converter_to_stix.create_relationship(
                    malware["id"], "exploits", vuln["id"]
                )

                stix_objects.append(malware)
                stix_objects.append(malware_vuln_relationship)

    conn.helper.connector_logger.info("[EXPLOITS] Data Source Completed!")
    return stix_objects
