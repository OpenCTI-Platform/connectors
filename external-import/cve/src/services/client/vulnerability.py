from typing import Generator

from .api import CVEClient


class CVEVulnerability(CVEClient):
    def get_vulnerabilities(self, cve_params=None) -> Generator[list, None, None]:
        """
        Get and filter CVE with scoring system V3
        :param cve_params: Dict of params
        :return: A generator for lists of dicts of CVE
        """

        cve_collection = self.get_complete_collection(cve_params)

        if cve_collection is None:
            raise Exception(
                "Attempting to retrieve data failed. " "Wait for connector to re-run..."
            )

        page_size = cve_collection["resultsPerPage"]
        cve_vulnerabilities_total = cve_collection["vulnerabilities"]
        total_items = cve_collection["totalResults"]

        filtered_vulnerabilities = self._filter_cvss31(
            cve_collection["vulnerabilities"]
        )

        if page_size == 0:
            msg = "[API] No Vulnerabilities to retrieve..."
            self.helper.log_info(msg)
            yield filtered_vulnerabilities
        elif page_size >= total_items:
            msg = f"[API] Received all {page_size} items. Pagination not required."
            self.helper.log_info(msg)
            yield filtered_vulnerabilities
        else:
            msg = f"[API] Received first {page_size} items of {total_items} total items, start pagination..."
            self.helper.log_info(msg)

            start_index = page_size

            while start_index < total_items:
                cve_params.update(
                    {"startIndex": start_index, "resultsPerPage": page_size}
                )

                cve_collection = self.get_complete_collection(cve_params)

                if cve_collection is None:
                    raise Exception(
                        "Attempting to retrieve data failed. "
                        "Wait for connector to re-run..."
                    )

                page_size = cve_collection["resultsPerPage"]
                total_items = cve_collection["totalResults"]
                start_index += page_size

                msg = f"[API] Received next {page_size} items, currently received {start_index} items of {total_items} total items."
                self.helper.log_info(msg)

                filtered_vulnerabilities = self._filter_cvss31(
                    cve_collection["vulnerabilities"]
                )
                yield filtered_vulnerabilities

        info_msg = (
            f"[API] All CVEs are retrieved. "
            f"Got {len(cve_vulnerabilities_total)} vulnerabilities in total"
        )
        self.helper.log_info(info_msg)

    def _filter_cvss31(self, cve_vulnerabilities) -> list:
        cve_vulnerabilities_filtered = []
        for cve_vulnerability in cve_vulnerabilities:
            metric_exist = cve_vulnerability["cve"]["metrics"]
            if metric_exist:
                for key, value in metric_exist.items():
                    if key == "cvssMetricV31":
                        cve_vulnerabilities_filtered.append(cve_vulnerability)

        info_msg = (
            f"[API] Filter for only CVSS 3.1 CVEs. "
            f"Got {len(cve_vulnerabilities_filtered)} vulnerabilities in total"
        )
        self.helper.log_info(info_msg)
        return cve_vulnerabilities_filtered
