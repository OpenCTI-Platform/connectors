"""Tests for the GTIMalwareFamilyToSTIXMalware mapper."""

from uuid import uuid4

import pytest
from connector.src.custom.mappers.gti_reports.gti_malware_family_to_stix_malware import (
    GTIMalwareFamilyToSTIXMalware,
)
from connector.src.custom.models.gti_reports.gti_malware_family_model import (
    AltNameDetail,
    GTIMalwareFamilyData,
    MalwareFamilyModel,
    MalwareRole,
    SeenDetail,
    TagDetail,
)
from connector.src.stix.v21.models.ovs.malware_type_ov_enums import MalwareTypeOV
from polyfactory.factories.pydantic_factory import ModelFactory
from polyfactory.fields import Use
from stix2.v21 import Identity, MarkingDefinition  # type: ignore


class AltNameDetailFactory(ModelFactory[AltNameDetail]):
    """Factory for AltNameDetail model."""

    __model__ = AltNameDetail


class MalwareRoleFactory(ModelFactory[MalwareRole]):
    """Factory for MalwareRole model."""

    __model__ = MalwareRole


class SeenDetailFactory(ModelFactory[SeenDetail]):
    """Factory for SeenDetail model."""

    __model__ = SeenDetail


class TagDetailFactory(ModelFactory[TagDetail]):
    """Factory for TagDetail model."""

    __model__ = TagDetail


class MalwareFamilyModelFactory(ModelFactory[MalwareFamilyModel]):
    """Factory for MalwareFamilyModel."""

    __model__ = MalwareFamilyModel


class GTIMalwareFamilyDataFactory(ModelFactory[GTIMalwareFamilyData]):
    """Factory for GTIMalwareFamilyData."""

    __model__ = GTIMalwareFamilyData

    type = "malware-family"
    attributes = Use(MalwareFamilyModelFactory.build)


@pytest.fixture
def mock_organization() -> Identity:
    """Fixture for mock organization identity."""
    return Identity(  # pylint: disable=W9101  # it's a test no real ingest
        name="Test Organization",
        identity_class="organization",
    )


@pytest.fixture
def mock_tlp_marking() -> MarkingDefinition:
    """Fixture for mock TLP marking definition."""
    return MarkingDefinition(
        id=f"marking-definition--{uuid4()}",
        definition_type="statement",
        definition={"statement": "Internal Use Only"},
    )


@pytest.fixture
def minimal_malware_family_data() -> GTIMalwareFamilyData:
    """Fixture for minimal malware family data."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            alt_names_details=None,
            malware_roles=None,
            first_seen_details=None,
            last_seen_details=None,
            tags_details=None,
        )
    )


@pytest.fixture
def malware_family_with_aliases() -> GTIMalwareFamilyData:
    """Fixture for malware family data with aliases."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            alt_names_details=[
                AltNameDetailFactory.build(),
                AltNameDetailFactory.build(),
            ]
        )
    )


@pytest.fixture
def malware_family_with_roles() -> GTIMalwareFamilyData:
    """Fixture for malware family data with malware roles."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            malware_roles=[
                MalwareRoleFactory.build(value="Ransomware"),
                MalwareRoleFactory.build(value="Trojan"),
            ]
        )
    )


@pytest.fixture
def malware_family_with_seen_dates() -> GTIMalwareFamilyData:
    """Fixture for malware family data with seen dates."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            first_seen_details=[SeenDetailFactory.build()],
            last_seen_details=[SeenDetailFactory.build()],
        )
    )


@pytest.fixture
def malware_family_with_tags() -> GTIMalwareFamilyData:
    """Fixture for malware family data with tags."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            tags_details=[
                TagDetailFactory.build(),
                TagDetailFactory.build(),
            ]
        )
    )


@pytest.fixture
def malware_family_with_all_data() -> GTIMalwareFamilyData:
    """Fixture for malware family data with all attributes."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            alt_names_details=[AltNameDetailFactory.build()],
            malware_roles=[MalwareRoleFactory.build(value="Backdoor")],
            first_seen_details=[SeenDetailFactory.build()],
            last_seen_details=[SeenDetailFactory.build()],
            tags_details=[TagDetailFactory.build()],
        )
    )


@pytest.fixture
def malware_family_without_attributes() -> GTIMalwareFamilyData:
    """Fixture for malware family without attributes."""
    return GTIMalwareFamilyDataFactory.build(attributes=None)


@pytest.fixture
def malware_family_with_empty_aliases() -> GTIMalwareFamilyData:
    """Fixture for malware family with empty aliases list."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(alt_names_details=[])
    )


@pytest.fixture
def malware_family_with_invalid_roles() -> GTIMalwareFamilyData:
    """Fixture for malware family with invalid role values."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            malware_roles=[
                MalwareRoleFactory.build(value="Invalid Role"),
                MalwareRoleFactory.build(value="Another Invalid"),
            ]
        )
    )


@pytest.fixture
def malware_family_with_mixed_valid_invalid_roles() -> GTIMalwareFamilyData:
    """Fixture for malware family with mix of valid and invalid roles."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            malware_roles=[
                MalwareRoleFactory.build(value="Ransomware"),
                MalwareRoleFactory.build(value="Invalid Role"),
                MalwareRoleFactory.build(value="Bot"),
            ]
        )
    )


@pytest.fixture
def malware_family_with_empty_role_values() -> GTIMalwareFamilyData:
    """Fixture for malware family with empty role values."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            malware_roles=[
                MalwareRoleFactory.build(value=""),
                MalwareRoleFactory.build(value="   "),
            ]
        )
    )


@pytest.fixture
def malware_family_with_empty_seen_details() -> GTIMalwareFamilyData:
    """Fixture for malware family with empty seen details."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            first_seen_details=[],
            last_seen_details=[],
        )
    )


@pytest.fixture
def malware_family_with_empty_tag_values() -> GTIMalwareFamilyData:
    """Fixture for malware family with empty tag values."""
    return GTIMalwareFamilyDataFactory.build(
        attributes=MalwareFamilyModelFactory.build(
            tags_details=[
                TagDetailFactory.build(value=""),
                TagDetailFactory.build(value="   "),
            ]
        )
    )


# Scenario: Create STIX malware with minimal data
def test_gti_malware_family_to_stix_minimal_data(
    minimal_malware_family_data, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with minimal data to STIX malware."""
    # Given a GTI malware family with minimal data
    mapper = _given_gti_malware_family_mapper(
        minimal_malware_family_data, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should be created with basic fields
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_correct_properties(
        malware, mock_organization, mock_tlp_marking
    )
    _then_stix_malware_has_default_malware_type(malware)


# Scenario: Create STIX malware with aliases
def test_gti_malware_family_to_stix_with_aliases(
    malware_family_with_aliases, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with aliases to STIX malware."""
    # Given a GTI malware family with aliases
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_aliases, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should include aliases
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_aliases(malware)


# Scenario: Create STIX malware with roles
def test_gti_malware_family_to_stix_with_roles(
    malware_family_with_roles, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with malware roles to STIX malware."""
    # Given a GTI malware family with malware roles
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_roles, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have mapped malware types
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_mapped_malware_types(malware)


# Scenario: Create STIX malware with seen dates
def test_gti_malware_family_to_stix_with_seen_dates(
    malware_family_with_seen_dates, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with seen dates to STIX malware."""
    # Given a GTI malware family with seen dates
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_seen_dates, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have seen dates
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_seen_dates(malware)


# Scenario: Create STIX malware with tags
def test_gti_malware_family_to_stix_with_tags(
    malware_family_with_tags, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with tags to STIX malware."""
    # Given a GTI malware family with tags
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_tags, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have labels
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_labels(malware)


# Scenario: Create STIX malware with all data
def test_gti_malware_family_to_stix_with_all_data(
    malware_family_with_all_data, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with all data to STIX malware."""
    # Given a GTI malware family with all data
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_all_data, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have all properties
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_correct_properties(
        malware, mock_organization, mock_tlp_marking
    )
    _then_stix_malware_has_aliases(malware)
    _then_stix_malware_has_mapped_malware_types(malware)
    _then_stix_malware_has_seen_dates(malware)
    _then_stix_malware_has_labels(malware)


# Scenario: Handle GTI malware family without attributes
def test_gti_malware_family_to_stix_without_attributes(
    malware_family_without_attributes, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family without attributes to STIX malware."""
    # Given a GTI malware family without attributes
    mapper = _given_gti_malware_family_mapper(
        malware_family_without_attributes, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    # Then should raise ValueError
    _when_convert_to_stix_raises_error(
        mapper, ValueError, "Invalid GTI malware family data"
    )


# Scenario: Handle GTI malware family with empty aliases
def test_gti_malware_family_to_stix_with_empty_aliases(
    malware_family_with_empty_aliases, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with empty aliases to STIX malware."""
    # Given a GTI malware family with empty aliases
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_empty_aliases, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have no aliases
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_no_aliases(malware)


# Scenario: Handle GTI malware family with invalid roles
def test_gti_malware_family_to_stix_with_invalid_roles(
    malware_family_with_invalid_roles, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with invalid roles to STIX malware."""
    # Given a GTI malware family with invalid roles
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_invalid_roles, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have the roles as new enum members (open vocabulary)
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_custom_malware_types(malware)


# Scenario: Handle GTI malware family with mixed valid/invalid roles
def test_gti_malware_family_to_stix_with_mixed_valid_invalid_roles(
    malware_family_with_mixed_valid_invalid_roles, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with mixed valid/invalid roles to STIX malware."""
    # Given a GTI malware family with mixed valid and invalid roles
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_mixed_valid_invalid_roles,
        mock_organization,
        mock_tlp_marking,
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have all roles as malware types (open vocabulary accepts all)
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_all_provided_malware_types(malware)


# Scenario: Handle GTI malware family with empty role values
def test_gti_malware_family_to_stix_with_empty_role_values(
    malware_family_with_empty_role_values, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with empty role values to STIX malware."""
    # Given a GTI malware family with empty role values
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_empty_role_values, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have whitespace malware types (whitespace strings are truthy in Python)
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_whitespace_malware_types(malware)


# Scenario: Handle GTI malware family with empty seen details
def test_gti_malware_family_to_stix_with_empty_seen_details(
    malware_family_with_empty_seen_details, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with empty seen details to STIX malware."""
    # Given a GTI malware family with empty seen details
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_empty_seen_details, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have no seen dates
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_no_seen_dates(malware)


# Scenario: Handle GTI malware family with empty tag values
def test_gti_malware_family_to_stix_with_empty_tag_values(
    malware_family_with_empty_tag_values, mock_organization, mock_tlp_marking
):
    """Test conversion of GTI malware family with empty tag values to STIX malware."""
    # Given a GTI malware family with empty tag values
    mapper = _given_gti_malware_family_mapper(
        malware_family_with_empty_tag_values, mock_organization, mock_tlp_marking
    )

    # When converting to STIX
    malware = _when_convert_to_stix(mapper)

    # Then STIX malware should have whitespace labels (implementation includes them)
    _then_stix_malware_created_successfully(malware)
    _then_stix_malware_has_whitespace_labels(malware)


def test_extract_aliases_from_malware_family_data(mock_organization, mock_tlp_marking):
    """Test _extract_aliases static method with malware family data."""
    # Given a malware family with alt names
    attributes = MalwareFamilyModelFactory.build(
        alt_names_details=[
            AltNameDetailFactory.build(),
            AltNameDetailFactory.build(),
        ]
    )

    # When extracting aliases
    aliases = GTIMalwareFamilyToSTIXMalware._extract_aliases(attributes)

    # Then aliases should be extracted
    assert aliases is not None  # noqa: S101
    assert len(aliases) == 2  # noqa: S101


def test_extract_aliases_without_alt_names(mock_organization, mock_tlp_marking):
    """Test _extract_aliases static method without alt names."""
    # Given a malware family without alt names
    attributes = MalwareFamilyModelFactory.build(alt_names_details=None)

    # When extracting aliases
    aliases = GTIMalwareFamilyToSTIXMalware._extract_aliases(attributes)

    # Then aliases should be None
    assert aliases is None  # noqa: S101


def test_extract_malware_types_with_valid_roles(mock_organization, mock_tlp_marking):
    """Test _extract_malware_types method with valid roles."""
    # Given a mapper and malware family with valid roles
    malware_family = GTIMalwareFamilyDataFactory.build()
    mapper = _given_gti_malware_family_mapper(
        malware_family, mock_organization, mock_tlp_marking
    )

    attributes = MalwareFamilyModelFactory.build(
        malware_roles=[
            MalwareRoleFactory.build(value="ransomware"),
            MalwareRoleFactory.build(value="bot"),
        ]
    )

    # When extracting malware types
    malware_types = mapper._extract_malware_types(attributes)

    # Then correct malware types should be extracted (open vocabulary accepts any string)
    assert len(malware_types) == 2  # noqa: S101
    assert any(mt.value == "ransomware" for mt in malware_types)  # noqa: S101
    assert any(mt.value == "bot" for mt in malware_types)  # noqa: S101


def test_extract_malware_types_without_roles(mock_organization, mock_tlp_marking):
    """Test _extract_malware_types method without roles."""
    # Given a mapper and malware family without roles
    malware_family = GTIMalwareFamilyDataFactory.build()
    mapper = _given_gti_malware_family_mapper(
        malware_family, mock_organization, mock_tlp_marking
    )

    attributes = MalwareFamilyModelFactory.build(malware_roles=None)

    # When extracting malware types
    malware_types = mapper._extract_malware_types(attributes)

    # Then unknown malware type should be returned
    assert len(malware_types) == 1  # noqa: S101
    assert malware_types[0] == MalwareTypeOV.UNKNOWN  # noqa: S101


def test_map_gti_role_to_stix_type_valid_mappings():
    """Test _map_gti_role_to_stix_type static method with role mappings."""
    # Given role mappings (open vocabulary accepts any string)
    test_cases = [
        "ransomware",
        "trojan",
        "bot",
        "backdoor",
        "adware",
    ]

    # When mapping each role
    for role in test_cases:
        result = GTIMalwareFamilyToSTIXMalware._map_gti_role_to_stix_type(role)
        # Then MalwareTypeOV enum should be returned with the role value
        assert result is not None  # noqa: S101
        assert result.value == role  # noqa: S101


def test_map_gti_role_to_stix_type_custom_role():
    """Test _map_gti_role_to_stix_type static method with custom role."""
    # Given a custom role (open vocabulary accepts any string)
    custom_role = "Custom Malware Type"
    # When mapping the role
    result = GTIMalwareFamilyToSTIXMalware._map_gti_role_to_stix_type(custom_role)
    # Then MalwareTypeOV enum should be returned with the custom role value
    assert result is not None  # noqa: S101
    assert result.value == custom_role  # noqa: S101


def test_extract_seen_dates_with_valid_data(mock_organization, mock_tlp_marking):
    """Test _extract_seen_dates static method with valid seen data."""
    # Given a malware family with seen dates
    attributes = MalwareFamilyModelFactory.build(
        first_seen_details=[SeenDetailFactory.build()],
        last_seen_details=[SeenDetailFactory.build()],
    )

    # When extracting seen dates
    first_seen, last_seen = GTIMalwareFamilyToSTIXMalware._extract_seen_dates(
        attributes
    )

    # Then seen dates should be extracted from the values attribute if it exists
    # Check if the factory data has the expected structure
    expected_first_seen = None
    expected_last_seen = None

    if (
        attributes.first_seen_details
        and len(attributes.first_seen_details) > 0
        and hasattr(attributes.first_seen_details[0], "values")
    ):
        expected_first_seen = attributes.first_seen_details[0].values

    if (
        attributes.last_seen_details
        and len(attributes.last_seen_details) > 0
        and hasattr(attributes.last_seen_details[0], "values")
    ):
        expected_last_seen = attributes.last_seen_details[0].values

    assert first_seen == expected_first_seen  # noqa: S101
    assert last_seen == expected_last_seen  # noqa: S101


def test_extract_seen_dates_without_data(mock_organization, mock_tlp_marking):
    """Test _extract_seen_dates static method without seen data."""
    # Given a malware family without seen dates
    attributes = MalwareFamilyModelFactory.build(
        first_seen_details=None,
        last_seen_details=None,
    )

    # When extracting seen dates
    first_seen, last_seen = GTIMalwareFamilyToSTIXMalware._extract_seen_dates(
        attributes
    )

    # Then seen dates should be None
    assert first_seen is None  # noqa: S101
    assert last_seen is None  # noqa: S101


def test_extract_labels_from_malware_family_data(mock_organization, mock_tlp_marking):
    """Test _extract_labels static method with malware family data."""
    # Given a malware family with tag details
    attributes = MalwareFamilyModelFactory.build(
        tags_details=[
            TagDetailFactory.build(),
            TagDetailFactory.build(),
        ]
    )

    # When extracting labels
    labels = GTIMalwareFamilyToSTIXMalware._extract_labels(attributes)

    # Then labels should be extracted
    assert labels is not None  # noqa: S101
    assert len(labels) == 2  # noqa: S101


def test_extract_labels_without_tags(mock_organization, mock_tlp_marking):
    """Test _extract_labels static method without tags."""
    # Given a malware family without tag details
    attributes = MalwareFamilyModelFactory.build(tags_details=None)

    # When extracting labels
    labels = GTIMalwareFamilyToSTIXMalware._extract_labels(attributes)

    # Then labels should be None
    assert labels is None  # noqa: S101


def _given_gti_malware_family_mapper(
    malware_family: GTIMalwareFamilyData,
    organization: Identity,
    tlp_marking: MarkingDefinition,
) -> GTIMalwareFamilyToSTIXMalware:
    """Create a GTIMalwareFamilyToSTIXMalware mapper instance."""
    return GTIMalwareFamilyToSTIXMalware(
        malware_family=malware_family,
        organization=organization,
        tlp_marking=tlp_marking,
    )


def _when_convert_to_stix(mapper: GTIMalwareFamilyToSTIXMalware):
    """Convert GTI malware family to STIX malware."""
    return mapper.to_stix()


def _when_convert_to_stix_raises_error(
    mapper: GTIMalwareFamilyToSTIXMalware, error_type: type, error_message: str
):
    """Test that conversion raises expected error."""
    with pytest.raises(error_type, match=error_message):
        mapper.to_stix()


def _then_stix_malware_created_successfully(malware):
    """Assert that STIX malware was created successfully."""
    assert malware is not None  # noqa: S101
    assert hasattr(malware, "name")  # noqa: S101
    assert hasattr(malware, "malware_types")  # noqa: S101
    assert hasattr(malware, "is_family")  # noqa: S101
    assert hasattr(malware, "spec_version")  # noqa: S101
    assert hasattr(malware, "created")  # noqa: S101
    assert hasattr(malware, "modified")  # noqa: S101


def _then_stix_malware_has_correct_properties(
    malware, organization: Identity, tlp_marking: MarkingDefinition
):
    """Assert that STIX malware has correct properties."""
    assert malware.created_by_ref == organization.id  # noqa: S101
    assert tlp_marking.id in malware.object_marking_refs  # noqa: S101
    assert malware.is_family is True  # noqa: S101


def _then_stix_malware_has_default_malware_type(malware):
    """Assert that STIX malware has default malware type."""
    assert len(malware.malware_types) == 1  # noqa: S101
    assert malware.malware_types[0] == MalwareTypeOV.UNKNOWN  # noqa: S101


def _then_stix_malware_has_aliases(malware):
    """Assert that STIX malware has aliases."""
    assert malware.aliases is not None  # noqa: S101
    assert len(malware.aliases) > 0  # noqa: S101


def _then_stix_malware_has_no_aliases(malware):
    """Assert that STIX malware has no aliases."""
    assert malware.aliases is None  # noqa: S101


def _then_stix_malware_has_mapped_malware_types(malware):
    """Assert that STIX malware has mapped malware types."""
    assert len(malware.malware_types) > 0  # noqa: S101
    assert all(  # noqa: S101
        isinstance(mt, MalwareTypeOV) for mt in malware.malware_types
    )


def _then_stix_malware_has_unknown_malware_types(malware):
    """Assert that STIX malware has unknown malware types."""
    assert len(malware.malware_types) == 1  # noqa: S101
    assert malware.malware_types[0] == MalwareTypeOV.UNKNOWN  # noqa: S101


def _then_stix_malware_has_mixed_malware_types(malware):
    """Assert that STIX malware has mix of malware types from valid roles only."""
    assert len(malware.malware_types) >= 1  # noqa: S101

    valid_types = ["Ransomware", "Bot"]
    assert all(mt.value in valid_types for mt in malware.malware_types)  # noqa: S101


def _then_stix_malware_has_custom_malware_types(malware):
    """Assert that STIX malware has custom malware types from open vocabulary."""
    assert len(malware.malware_types) >= 1  # noqa: S101
    custom_types = ["Invalid Role", "Another Invalid"]
    assert all(mt.value in custom_types for mt in malware.malware_types)  # noqa: S101


def _then_stix_malware_has_all_provided_malware_types(malware):
    """Assert that STIX malware has all provided malware types."""
    assert len(malware.malware_types) == 3  # noqa: S101
    role_strings = [mt.value for mt in malware.malware_types]
    expected_roles = ["Ransomware", "Invalid Role", "Bot"]
    assert all(role in role_strings for role in expected_roles)  # noqa: S101


def _then_stix_malware_has_seen_dates(malware):
    """Assert that STIX malware has seen dates."""
    assert hasattr(malware, "first_seen") and hasattr(  # noqa: S101
        malware, "last_seen"
    )


def _then_stix_malware_has_no_seen_dates(malware):
    """Assert that STIX malware has no seen dates."""
    assert malware.first_seen is None  # noqa: S101
    assert malware.last_seen is None  # noqa: S101


def _then_stix_malware_has_labels(malware):
    """Assert that STIX malware has labels."""
    assert malware.labels is not None  # noqa: S101
    assert len(malware.labels) > 0  # noqa: S101


def _then_stix_malware_has_no_labels(malware):
    """Assert that STIX malware has no labels."""
    assert malware.labels is None  # noqa: S101


def _then_stix_malware_has_whitespace_malware_types(malware):
    """Assert that STIX malware has whitespace malware types from open vocabulary."""
    assert len(malware.malware_types) == 1  # noqa: S101
    assert malware.malware_types[0].value == "   "  # noqa: S101


def _then_stix_malware_has_whitespace_labels(malware):
    """Assert that STIX malware has whitespace labels."""
    assert malware.labels is not None  # noqa: S101
    assert len(malware.labels) == 1  # noqa: S101
    assert malware.labels[0] == "   "  # noqa: S101
