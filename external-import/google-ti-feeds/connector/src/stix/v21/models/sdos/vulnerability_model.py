"""The module defines the VulnerabilityModel class, which represents a STIX 2.1 Vulnerability object."""

from typing import Optional

from connector.src.stix.v21.models.sdos.sdo_common_model import BaseSDOModel
from pydantic import Field
from stix2.v21 import Vulnerability, _STIXBase21  # type: ignore


class VulnerabilityModel(BaseSDOModel):
    """Model representing a Vulnerability in STIX 2.1 format."""

    name: str = Field(..., description="A name used to identify the Vulnerability.")
    description: Optional[str] = Field(
        default=None,
        description="Context and details about the Vulnerability, including purpose and key characteristics.",
    )

    def to_stix2_object(self) -> _STIXBase21:
        """Convert the model to a STIX 2.1 object."""
        return Vulnerability(**self.model_dump(exclude_none=True))


def test_vulnerability_model() -> None:
    """Test function to demonstrate the usage of VulnerabilityModel."""
    from datetime import UTC, datetime
    from uuid import uuid4

    now = datetime.now(UTC)

    # === Minimal Vulnerability ===
    minimal = VulnerabilityModel(
        type="vulnerability",
        spec_version="2.1",
        id=f"vulnerability--{uuid4()}",
        created=now,
        modified=now,
        name="CVE-2025-9999",
    )

    print("=== MINIMAL VULNERABILITY ===")  # noqa: T201
    print(minimal.to_stix2_object().serialize(pretty=True))  # noqa: T201

    # === Full Vulnerability ===
    full = VulnerabilityModel(
        type="vulnerability",
        spec_version="2.1",
        id=f"vulnerability--{uuid4()}",
        created=now,
        modified=now,
        name="CVE-2025-1337",
        description=(
            "A buffer overflow in the HydraVPN client allows remote attackers to execute arbitrary code "
            "via a malformed packet in the handshake phase. CVSS: 9.8 critical."
        ),
        labels=["buffer-overflow", "rce", "critical"],
        confidence=98,
        lang="en",
        revoked=False,
        created_by_ref=f"identity--{uuid4()}",
        external_references=[],
        object_marking_refs=[f"marking-definition--{uuid4()}"],
        granular_markings=[
            {
                "selectors": ["description"],
                "marking_ref": f"marking-definition--{uuid4()}",
            }
        ],
        extensions={
            f"extension-definition--{uuid4()}": {
                "extension_type": "new-sdo",
                "cvss_score": 9.8,
                "exploitable": True,
            }
        },
    )

    print("\n=== FULL VULNERABILITY ===")  # noqa: T201
    print(full.to_stix2_object().serialize(pretty=True))  # noqa: T201


if __name__ == "__main__":
    test_vulnerability_model()
