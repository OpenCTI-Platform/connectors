"""The module defines a Pydantic model for the STIX 2.1 Malware Analysis object."""

from datetime import datetime
from typing import Any, Dict, List, Optional

import pycti  # type: ignore  # Missing library stubs
from connector.src.stix.v21.models.sdos.sdo_common_model import BaseSDOModel
from pydantic import Field, model_validator
from stix2.v21 import (  # type: ignore[import-untyped]  # Missing library stubs
    MalwareAnalysis,
    _STIXBase21,
)


class MalwareAnalysisModel(BaseSDOModel):
    """Model representing a Malware Analysis in STIX 2.1 format."""

    product: str = Field(
        ...,
        description="Name of the analysis engine or product used. SHOULD be lowercase and dash-separated. Use 'anonymized' if the name must be redacted.",
    )
    version: Optional[str] = Field(
        default=None, description="Version of the analysis product used."
    )
    host_vm_ref: Optional[str] = Field(
        default=None,
        description="Identifier for the virtual machine (SCO software object) used in dynamic analysis.",
    )
    operating_system_ref: Optional[str] = Field(
        default=None,
        description="Identifier for the OS (SCO software object) used in dynamic analysis.",
    )
    installed_software_refs: Optional[List[str]] = Field(
        default=None,
        description="Identifiers for any non-standard software installed on the analysis OS.",
    )
    configuration_version: Optional[str] = Field(
        default=None,
        description="Named configuration version of the product's analysis setup.",
    )
    modules: Optional[List[str]] = Field(
        default=None,
        description="List of specific analysis modules enabled during the analysis run.",
    )
    analysis_engine_version: Optional[str] = Field(
        default=None, description="Version of the analysis engine used."
    )
    analysis_definition_version: Optional[str] = Field(
        default=None,
        description="Version of definitions (AV or other) used by the analysis engine.",
    )
    submitted: Optional[datetime] = Field(
        default=None,
        description="Timestamp when the malware was submitted for analysis.",
    )
    analysis_started: Optional[datetime] = Field(
        default=None, description="Timestamp when the analysis began."
    )
    analysis_ended: Optional[datetime] = Field(
        default=None, description="Timestamp when the analysis ended."
    )
    analysis_sco_refs: Optional[List[str]] = Field(
        default=None,
        description="References to SCOs captured during the analysis.",
    )

    @model_validator(mode="after")
    def validate_timestamps(self) -> "MalwareAnalysisModel":
        """Validate the timestamps in the model."""
        if self.analysis_started and self.analysis_ended:
            if self.analysis_ended < self.analysis_started:
                raise ValueError(
                    "'analysis_ended' must be greater than or equal to 'analysis_started'."
                )
        return self

    @model_validator(mode="before")
    @classmethod
    def generate_id(cls, data: Dict[str, Any]) -> Dict[str, Any]:
        """Generate ID regardless of whether one is provided."""
        data["id"] = MalwareAnalysisModel._generate_id(data=data)
        return data

    @classmethod
    def _generate_id(cls, data: Dict[str, Any]) -> Any:
        """Generate ID regardless of whether one is provided."""
        if isinstance(data, dict) and "name" in data:
            name = data.get("name", None)
            product = data.get("product", None)
            submitted = data.get("submitted", None)
            data["id"] = pycti.MalwareAnalysis.generate_id(
                result_name=name, product=product, submitted=submitted
            )
        return data["id"]

    def to_stix2_object(self) -> _STIXBase21:
        """Convert the model to a STIX 2.1 object."""
        data = self.model_dump(exclude={"id"}, exclude_none=True)
        pycti_id = MalwareAnalysisModel._generate_id(data=data)
        data.pop("id")

        return MalwareAnalysis(id=pycti_id, **data)
