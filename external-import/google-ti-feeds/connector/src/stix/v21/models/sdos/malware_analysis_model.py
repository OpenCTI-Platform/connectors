"""The module defines a Pydantic model for the STIX 2.1 Malware Analysis object."""

from datetime import datetime
from typing import List, Optional

from connector.src.stix.v21.models.sdos.sdo_common_model import BaseSDOModel
from pydantic import Field, model_validator
from stix2.v21 import MalwareAnalysis, _STIXBase21  # type: ignore


class MalwareAnalysisModel(BaseSDOModel):
    """Model representing a Malware Analysis in STIX 2.1 format."""

    product: str = Field(
        ...,
        description="Name of the analysis engine or product used. SHOULD be lowercase and dash-separated. Use 'anonymized' if the name must be redacted.",
    )
    version: Optional[str] = Field(
        default=None, description="Version of the analysis product used."
    )
    host_vm_ref: Optional[str] = Field(
        default=None,
        description="Identifier for the virtual machine (SCO software object) used in dynamic analysis.",
    )
    operating_system_ref: Optional[str] = Field(
        default=None,
        description="Identifier for the OS (SCO software object) used in dynamic analysis.",
    )
    installed_software_refs: Optional[List[str]] = Field(
        default=None,
        description="Identifiers for any non-standard software installed on the analysis OS.",
    )
    configuration_version: Optional[str] = Field(
        default=None,
        description="Named configuration version of the product's analysis setup.",
    )
    modules: Optional[List[str]] = Field(
        default=None,
        description="List of specific analysis modules enabled during the analysis run.",
    )
    analysis_engine_version: Optional[str] = Field(
        default=None, description="Version of the analysis engine used."
    )
    analysis_definition_version: Optional[str] = Field(
        default=None,
        description="Version of definitions (AV or other) used by the analysis engine.",
    )
    submitted: Optional[datetime] = Field(
        default=None,
        description="Timestamp when the malware was submitted for analysis.",
    )
    analysis_started: Optional[datetime] = Field(
        default=None, description="Timestamp when the analysis began."
    )
    analysis_ended: Optional[datetime] = Field(
        default=None, description="Timestamp when the analysis ended."
    )
    analysis_sco_refs: Optional[List[str]] = Field(
        default=None,
        description="References to SCOs captured during the analysis.",
    )

    @model_validator(mode="after")
    def validate_timestamps(self) -> "MalwareAnalysisModel":
        """Validate the timestamps in the model."""
        if self.analysis_started and self.analysis_ended:
            if self.analysis_ended < self.analysis_started:
                raise ValueError(
                    "'analysis_ended' must be greater than or equal to 'analysis_started'."
                )
        return self

    def to_stix2_object(self) -> _STIXBase21:
        """Convert the model to a STIX 2.1 object."""
        return MalwareAnalysis(**self.model_dump(exclude_none=True))


def test_malware_analysis_model() -> None:
    """Test function to demonstrate the usage of MalwareAnalysisModel."""
    from datetime import UTC, datetime, timedelta
    from uuid import uuid4

    # === Minimal Malware Analysis ===
    minimal = MalwareAnalysisModel(
        type="malware-analysis",
        spec_version="2.1",
        id=f"malware-analysis--{uuid4()}",
        created=datetime.now(UTC),
        analysis_sco_refs=[f"file--{uuid4()}"],
        modified=datetime.now(UTC),
        product="sandbox-x",
    )

    print("=== MINIMAL MALWARE ANALYSIS ===")  # noqa: T201
    print(minimal.to_stix2_object().serialize(pretty=True))  # noqa: T201

    # === Full Malware Analysis ===
    now = datetime.now(UTC)
    full = MalwareAnalysisModel(
        type="malware-analysis",
        spec_version="2.1",
        id=f"malware-analysis--{uuid4()}",
        created=now,
        modified=now,
        product="phantom-analyzer",
        version="5.4.0",
        host_vm_ref=f"software--{uuid4()}",
        operating_system_ref=f"software--{uuid4()}",
        installed_software_refs=[
            f"software--{uuid4()}",
            f"software--{uuid4()}",
        ],
        configuration_version="conf-v3.2",
        modules=["static-analysis", "network-monitoring", "heuristics"],
        analysis_engine_version="3.1.2",
        analysis_definition_version="2025.04.15",
        submitted=now - timedelta(hours=4),
        analysis_started=now - timedelta(hours=3),
        analysis_ended=now - timedelta(hours=2, minutes=30),
        analysis_sco_refs=[f"file--{uuid4()}", f"process--{uuid4()}"],
        labels=["dynamic", "vm-based", "heuristics"],
        confidence=90,
        lang="en",
        revoked=False,
        created_by_ref=f"identity--{uuid4()}",
        external_references=[],
        object_marking_refs=[f"marking-definition--{uuid4()}"],
        granular_markings=[
            {
                "selectors": ["product"],
                "marking_ref": f"marking-definition--{uuid4()}",
            }
        ],
        extensions={
            f"extension-definition--{uuid4()}": {
                "extension_type": "new-sdo",
                "av_result": "stealth-mode",
            }
        },
    )

    print("\n=== FULL MALWARE ANALYSIS ===")  # noqa: T201
    print(full.to_stix2_object().serialize(pretty=True))  # noqa: T201


if __name__ == "__main__":
    test_malware_analysis_model()
