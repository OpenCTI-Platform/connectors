"""The module defines a Pydantic model for the STIX 2.1 Malware Analysis object."""

from datetime import datetime
from typing import Any, Dict, List, Optional

import pycti  # type: ignore  # Missing library stubs
from connector.src.stix.v21.models.cdts.kill_chain_phase_model import (
    KillChainPhaseModel,
)
from connector.src.stix.v21.models.ovs.implementation_language_ov_enums import (
    ImplementationLanguageOV,
)
from connector.src.stix.v21.models.ovs.malware_capabilities_ov_enums import (
    MalwareCapabilitiesOV,
)
from connector.src.stix.v21.models.ovs.malware_type_ov_enums import MalwareTypeOV
from connector.src.stix.v21.models.ovs.processor_architecture_ov_enums import (
    ProcessorArchitectureOV,
)
from connector.src.stix.v21.models.sdos.sdo_common_model import BaseSDOModel
from pydantic import Field, model_validator
from stix2.v21 import (  # type: ignore[import-untyped]  # Missing library stubs
    Malware,
    _STIXBase21,
)


class MalwareModel(BaseSDOModel):
    """Model representing a Malware in STIX 2.1 format."""

    name: Optional[str] = Field(
        default=None,
        description="A name used to identify the malware instance or family. MUST be defined for a family. If unavailable for an instance, SHA-256 or filename MAY be used.",
    )
    description: Optional[str] = Field(
        default=None,
        description="Detailed context about the malware instance or familyâ€”its purpose and key characteristics.",
    )
    malware_types: List[MalwareTypeOV] = Field(
        ...,
        description="Open vocabulary categorizing the malware. SHOULD come from malware-type-ov.",
    )
    is_family: bool = Field(
        ...,
        description="True if this is a malware family, False if it's a specific instance.",
    )
    aliases: Optional[List[str]] = Field(
        default=None,
        description="Alternative names used to identify this malware or malware family.",
    )
    kill_chain_phases: Optional[List[KillChainPhaseModel]] = Field(
        default=None,
        description="Kill Chain Phases in which this malware can be used.",
    )
    first_seen: Optional[datetime] = Field(
        default=None,
        description="Earliest time this malware was observed. May be updated with earlier sightings.",
    )
    last_seen: Optional[datetime] = Field(
        default=None,
        description="Most recent time this malware was observed. MUST be >= first_seen if both are set.",
    )
    os_execution_envs: Optional[List[str]] = Field(
        default=None,
        description="Operating systems this malware runs on. SHOULD use CPE v2.3 format.",
    )
    architecture_execution_envs: Optional[List[ProcessorArchitectureOV]] = Field(
        default=None,
        description="Processor architectures this malware can execute on. SHOULD come from processor-architecture-ov.",
    )
    implementation_languages: Optional[List[ImplementationLanguageOV]] = Field(
        default=None,
        description="Programming languages used to implement this malware. SHOULD come from implementation-language-ov.",
    )
    capabilities: Optional[List[MalwareCapabilitiesOV]] = Field(
        default=None,
        description="Identified capabilities of the malware. SHOULD come from malware-capabilities-ov.",
    )
    sample_refs: Optional[List[str]] = Field(
        default=None,
        description="List of identifiers for SCO file or artifact samples linked to this malware.",
    )

    @model_validator(mode="after")
    def validate_timestamps(self) -> "MalwareModel":
        """Ensure that 'last_seen' is greater than or equal to 'first_seen'."""
        if self.first_seen and self.last_seen:
            if self.last_seen < self.first_seen:
                raise ValueError(
                    "'last_seen' must be greater than or equal to 'first_seen'."
                )
        return self

    @model_validator(mode="before")
    @classmethod
    def generate_id(cls, data: Dict[str, Any]) -> Dict[str, Any]:
        """Generate ID regardless of whether one is provided."""
        data["id"] = MalwareModel._generate_id(data=data)
        return data

    @classmethod
    def _generate_id(cls, data: Dict[str, Any]) -> Any:
        """Generate ID regardless of whether one is provided."""
        if isinstance(data, dict) and "name" in data:
            data["id"] = pycti.Malware.generate_id(name=data["name"])
        return data["id"]

    def to_stix2_object(self) -> _STIXBase21:
        """Convert the model to a STIX 2.1 object."""
        data = self.model_dump(exclude={"id"}, exclude_none=True)
        pycti_id = MalwareModel._generate_id(data=data)
        data.pop("id")

        return Malware(id=pycti_id, **data)
