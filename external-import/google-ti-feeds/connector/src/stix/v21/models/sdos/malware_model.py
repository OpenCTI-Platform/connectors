"""The module defines a Pydantic model for the STIX 2.1 Malware Analysis object."""

from datetime import datetime
from typing import List, Optional

from connector.src.stix.v21.models.cdts.kill_chain_phase_model import (
    KillChainPhaseModel,
)
from connector.src.stix.v21.models.ovs.implementation_language_ov_enums import (
    ImplementationLanguageOV,
)
from connector.src.stix.v21.models.ovs.malware_capabilities_ov_enums import (
    MalwareCapabilitiesOV,
)
from connector.src.stix.v21.models.ovs.malware_type_ov_enums import MalwareTypeOV
from connector.src.stix.v21.models.ovs.processor_architecture_ov_enums import (
    ProcessorArchitectureOV,
)
from connector.src.stix.v21.models.sdos.sdo_common_model import BaseSDOModel
from pydantic import Field, model_validator
from stix2.v21 import Malware, _STIXBase21  # type: ignore


class MalwareModel(BaseSDOModel):
    """Model representing a Malware in STIX 2.1 format."""

    name: Optional[str] = Field(
        default=None,
        description="A name used to identify the malware instance or family. MUST be defined for a family. If unavailable for an instance, SHA-256 or filename MAY be used.",
    )
    description: Optional[str] = Field(
        default=None,
        description="Detailed context about the malware instance or familyâ€”its purpose and key characteristics.",
    )
    malware_types: List[MalwareTypeOV] = Field(
        ...,
        description="Open vocabulary categorizing the malware. SHOULD come from malware-type-ov.",
    )
    is_family: bool = Field(
        ...,
        description="True if this is a malware family, False if it's a specific instance.",
    )
    aliases: Optional[List[str]] = Field(
        default=None,
        description="Alternative names used to identify this malware or malware family.",
    )
    kill_chain_phases: Optional[List[KillChainPhaseModel]] = Field(
        default=None,
        description="Kill Chain Phases in which this malware can be used.",
    )
    first_seen: Optional[datetime] = Field(
        default=None,
        description="Earliest time this malware was observed. May be updated with earlier sightings.",
    )
    last_seen: Optional[datetime] = Field(
        default=None,
        description="Most recent time this malware was observed. MUST be >= first_seen if both are set.",
    )
    os_execution_envs: Optional[List[str]] = Field(
        default=None,
        description="Operating systems this malware runs on. SHOULD use CPE v2.3 format.",
    )
    architecture_execution_envs: Optional[List[ProcessorArchitectureOV]] = Field(
        default=None,
        description="Processor architectures this malware can execute on. SHOULD come from processor-architecture-ov.",
    )
    implementation_languages: Optional[List[ImplementationLanguageOV]] = Field(
        default=None,
        description="Programming languages used to implement this malware. SHOULD come from implementation-language-ov.",
    )
    capabilities: Optional[List[MalwareCapabilitiesOV]] = Field(
        default=None,
        description="Identified capabilities of the malware. SHOULD come from malware-capabilities-ov.",
    )
    sample_refs: Optional[List[str]] = Field(
        default=None,
        description="List of identifiers for SCO file or artifact samples linked to this malware.",
    )

    @model_validator(mode="after")
    def validate_timestamps(self) -> "MalwareModel":
        """Ensure that 'last_seen' is greater than or equal to 'first_seen'."""
        if self.first_seen and self.last_seen:
            if self.last_seen < self.first_seen:
                raise ValueError(
                    "'last_seen' must be greater than or equal to 'first_seen'."
                )
        return self

    def to_stix2_object(self) -> _STIXBase21:
        """Convert the model to a STIX 2.1 object."""
        return Malware(**self.model_dump(exclude_none=True))


def test_malware_model() -> None:
    """Test function to demonstrate the usage of MalwareModel."""
    from datetime import UTC, datetime, timedelta
    from uuid import uuid4

    # === Minimal Malware ===
    minimal = MalwareModel(
        type="malware",
        spec_version="2.1",
        id=f"malware--{uuid4()}",
        created=datetime.now(UTC),
        modified=datetime.now(UTC),
        malware_types=[MalwareTypeOV.TROJAN],
        is_family=True,
        name="GhostLoader",
    )

    print("=== MINIMAL MALWARE ===")  # noqa: T201
    print(minimal.to_stix2_object().serialize(pretty=True))  # noqa: T201

    # === Full Malware ===
    now = datetime.now(UTC)
    full = MalwareModel(
        type="malware",
        spec_version="2.1",
        id=f"malware--{uuid4()}",
        created=now,
        modified=now,
        name="BlackSpecter",
        description="Highly modular espionage framework used by Hydra intrusion set.",
        malware_types=[
            MalwareTypeOV.SPYWARE,
            MalwareTypeOV.REMOTE_ACCESS_TROJAN,
        ],
        is_family=False,
        aliases=["BSpecter", "GhostNode", "SpecterRAT"],
        kill_chain_phases=[
            KillChainPhaseModel(kill_chain_name="mitre-attack", phase_name="execution"),
            KillChainPhaseModel(
                kill_chain_name="mitre-attack", phase_name="persistence"
            ),
        ],
        first_seen=now - timedelta(days=120),
        last_seen=now - timedelta(days=3),
        os_execution_envs=[
            "cpe:2.3:o:microsoft:windows_10:*:*:*:*:*:*:*:*",
            "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*",
        ],
        architecture_execution_envs=[
            ProcessorArchitectureOV.X86,
            ProcessorArchitectureOV.X86_64,
        ],
        implementation_languages=[
            ImplementationLanguageOV.C,
            ImplementationLanguageOV.PYTHON,
        ],
        capabilities=[
            MalwareCapabilitiesOV.ANTI_DISASSEMBLY,
            MalwareCapabilitiesOV.COMMUNICATES_WITH_C2,
            MalwareCapabilitiesOV.SELF_MODIFIES,
        ],
        sample_refs=[f"file--{uuid4()}", f"artifact--{uuid4()}"],
        labels=["malware", "espionage", "modular"],
        confidence=97,
        lang="en",
        revoked=False,
        created_by_ref=f"identity--{uuid4()}",
        external_references=[],
        object_marking_refs=[f"marking-definition--{uuid4()}"],
        granular_markings=[
            {
                "selectors": ["name", "description", "capabilities"],
                "marking_ref": f"marking-definition--{uuid4()}",
            }
        ],
        extensions={
            f"extension-definition--{uuid4()}": {
                "extension_type": "new-sdo",
                "malware_family_id": "bspec-001",
            }
        },
    )

    print("\n=== FULL MALWARE ===")  # noqa: T201
    print(full.to_stix2_object().serialize(pretty=True))  # noqa: T201


if __name__ == "__main__":
    test_malware_model()
