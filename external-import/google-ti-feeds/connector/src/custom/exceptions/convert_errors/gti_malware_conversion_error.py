"""Exception for errors when converting GTI malware families to STIX malware objects."""

from connector.src.custom.exceptions.convert_errors.gti_entity_conversion_error import (
    GTIEntityConversionError,
)


class GTIMalwareConversionError(GTIEntityConversionError):
    """Exception raised when there's an error converting a GTI malware family to STIX format."""

    def __init__(
        self,
        message: str,
        malware_id: str | None = None,
        malware_name: str | None = None,
    ):
        """Initialize the exception.

        Args:
            message: Error message
            malware_id: ID of the malware family that failed to convert
            malware_name: Name of the malware family, if available

        """
        super().__init__(message, malware_id, "Malware")
        self.malware_name = malware_name

        # Add structured data for logging
        if hasattr(self, "structured_data"):
            if malware_name:
                self.structured_data["malware_name"] = malware_name
        else:
            self.structured_data = {}
            if malware_name:
                self.structured_data["malware_name"] = malware_name
