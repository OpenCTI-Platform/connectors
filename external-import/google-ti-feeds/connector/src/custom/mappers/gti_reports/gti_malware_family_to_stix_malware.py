"""Converts a GTI malware family to a STIX malware object."""

from datetime import datetime, timezone
from typing import List, Optional

from connector.src.custom.models.gti_reports.gti_malware_family_model import (
    GTIMalwareFamilyData,
    MalwareFamilyModel,
)
from connector.src.stix.octi.models.malware_model import OctiMalwareModel
from connector.src.stix.v21.models.ovs.malware_type_ov_enums import MalwareTypeOV
from connector.src.utils.converters.generic_converter_config import BaseMapper
from stix2.v21 import Identity, Malware, MarkingDefinition  # type: ignore


class GTIMalwareFamilyToSTIXMalware(BaseMapper):
    """Converts a GTI malware family to a STIX malware object."""

    def __init__(
        self,
        malware_family: GTIMalwareFamilyData,
        organization: Identity,
        tlp_marking: MarkingDefinition,
    ) -> None:
        """Initialize the GTIMalwareFamilyToSTIXMalware object.

        Args:
            malware_family (GTIMalwareFamilyData): The GTI malware family data to convert.
            organization (Identity): The organization identity object.
            tlp_marking (MarkingDefinition): The TLP marking definition.

        """
        self.malware_family = malware_family
        self.organization = organization
        self.tlp_marking = tlp_marking

    def to_stix(self) -> Malware:
        """Convert the GTI malware family to a STIX malware object.

        Returns:
            Malware: The STIX malware object.

        """
        if (
            not hasattr(self.malware_family, "attributes")
            or not self.malware_family.attributes
        ):
            raise ValueError("Invalid GTI malware family data")

        attributes = self.malware_family.attributes

        created = datetime.fromtimestamp(attributes.creation_date, tz=timezone.utc)
        modified = datetime.fromtimestamp(
            attributes.last_modification_date, tz=timezone.utc
        )

        aliases = self._extract_aliases(attributes)

        malware_types = self._extract_malware_types(attributes)

        first_seen, last_seen = self._extract_seen_dates(attributes)

        labels = self._extract_labels(attributes)

        malware_model = OctiMalwareModel.create(
            name=attributes.name,
            organization_id=self.organization.id,
            marking_ids=[self.tlp_marking.id],
            malware_types=malware_types,
            is_family=True,
            description=attributes.description,
            aliases=aliases,
            first_seen=first_seen,
            last_seen=last_seen,
            labels=labels,
            created=created,
            modified=modified,
        )

        return malware_model

    @staticmethod
    def _extract_aliases(attributes: MalwareFamilyModel) -> Optional[List[str]]:
        """Extract aliases from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            Optional[List[str]]: Extracted aliases or None if no aliases exist

        """
        if (
            not hasattr(attributes, "alt_names_details")
            or not attributes.alt_names_details
        ):
            return None

        aliases = []
        for alt_name in attributes.alt_names_details:
            if hasattr(alt_name, "value") and alt_name.value:
                aliases.append(alt_name.value)

        return aliases if aliases else None

    def _extract_malware_types(
        self, attributes: MalwareFamilyModel
    ) -> List[MalwareTypeOV]:
        """Extract malware types from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            List[MalwareTypeOV]: Extracted malware types

        """
        malware_types = []
        if hasattr(attributes, "malware_roles") and attributes.malware_roles:
            for role in attributes.malware_roles:
                if hasattr(role, "value") and role.value:
                    try:
                        malware_type = self._map_gti_role_to_stix_type(role.value)
                        if malware_type:
                            malware_types.append(malware_type)
                    except ValueError:
                        malware_types.append(MalwareTypeOV.UNKNOWN)

        if not malware_types:
            malware_types.append(MalwareTypeOV.UNKNOWN)

        return malware_types

    @staticmethod
    def _map_gti_role_to_stix_type(role: str) -> Optional[MalwareTypeOV]:
        """Map GTI malware role to STIX malware type.

        Args:
            role: The GTI malware role

        Returns:
            Optional[MalwareTypeOV]: Mapped STIX malware type or None if no mapping exists

        """
        return MalwareTypeOV(role)

    @staticmethod
    def _extract_seen_dates(
        attributes: MalwareFamilyModel,
    ) -> tuple[Optional[datetime], Optional[datetime]]:
        """Extract first_seen and last_seen dates from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            tuple: (first_seen, last_seen) datetime objects or None if dates don't exist

        """
        first_seen = None
        if (
            hasattr(attributes, "first_seen_details")
            and attributes.first_seen_details
            and len(attributes.first_seen_details) > 0
            and hasattr(attributes.first_seen_details[0], "values")
        ):
            first_seen = attributes.first_seen_details[0].values

        last_seen = None
        if (
            hasattr(attributes, "last_seen_details")
            and attributes.last_seen_details
            and len(attributes.last_seen_details) > 0
            and hasattr(attributes.last_seen_details[0], "values")
        ):
            last_seen = attributes.last_seen_details[0].values

        return first_seen, last_seen

    @staticmethod
    def _extract_labels(attributes: MalwareFamilyModel) -> Optional[List[str]]:
        """Extract labels from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            Optional[List[str]]: Extracted labels or None if no labels exist

        """
        if not hasattr(attributes, "tags_details") or not attributes.tags_details:
            return None

        labels = []
        for tag in attributes.tags_details:
            if hasattr(tag, "value") and tag.value:
                labels.append(tag.value)

        return labels if labels else None
