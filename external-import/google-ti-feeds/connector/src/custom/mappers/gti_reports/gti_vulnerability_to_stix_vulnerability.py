"""Converts a GTI vulnerability to a STIX vulnerability object."""

from datetime import datetime
from typing import Dict, List, Optional

from connector.src.custom.models.gti_reports.gti_vulnerability_model import (
    GTIVulnerabilityData,
    VulnerabilityModel,
)
from connector.src.stix.octi.models.vulnerability_model import OctiVulnerabilityModel
from connector.src.utils.converters.generic_converter_config import BaseMapper
from stix2.v21 import Identity, MarkingDefinition, Vulnerability  # type: ignore


class GTIVulnerabilityToSTIXVulnerability(BaseMapper):
    """Converts a GTI vulnerability to a STIX vulnerability object."""

    def __init__(
        self,
        vulnerability: GTIVulnerabilityData,
        organization: Identity,
        tlp_marking: MarkingDefinition,
    ) -> None:
        """Initialize the GTIVulnerabilityToSTIXVulnerability object.

        Args:
            vulnerability (GTIVulnerabilityData): The GTI vulnerability data to convert.
            organization (Identity): The organization identity object.
            tlp_marking (MarkingDefinition): The TLP marking definition.

        """
        self.vulnerability = vulnerability
        self.organization = organization
        self.tlp_marking = tlp_marking

    def to_stix(self) -> Vulnerability:
        """Convert the GTI vulnerability to a STIX vulnerability object.

        Returns:
            Vulnerability: The STIX vulnerability object.

        """
        if not self.vulnerability or not self.vulnerability.attributes:
            raise ValueError("Vulnerability attributes are missing")

        attributes = self.vulnerability.attributes

        created = datetime.fromtimestamp(attributes.creation_date)
        modified = datetime.fromtimestamp(attributes.last_modification_date)

        base_score = None
        if (
            hasattr(attributes, "cvss")
            and attributes.cvss
            and hasattr(attributes.cvss, "cvssv3")
            and attributes.cvss.cvssv3
            and hasattr(attributes.cvss.cvssv3, "base_score")
        ):
            base_score = attributes.cvss.cvssv3.base_score

        epss_score = None
        epss_percentile = None
        if hasattr(attributes, "epss") and attributes.epss:
            if hasattr(attributes.epss, "score"):
                epss_score = attributes.epss.score
            if hasattr(attributes.epss, "percentile"):
                epss_percentile = attributes.epss.percentile

        labels = self._extract_labels(attributes)
        external_references = self._create_external_references(attributes)

        vulnerability_model = OctiVulnerabilityModel.create(
            name=attributes.name,
            cve_id=self.vulnerability.id,
            organization_id=self.organization.id,
            marking_ids=[self.tlp_marking.id],
            description=attributes.description,
            created=created,
            modified=modified,
            base_score=base_score,
            epss_score=epss_score,
            epss_percentile=epss_percentile,
            labels=labels,
            external_references=external_references,
        )

        return vulnerability_model

    @staticmethod
    def _extract_labels(attributes: VulnerabilityModel) -> Optional[List[str]]:
        """Extract labels from vulnerability attributes.

        Args:
            attributes: The vulnerability attributes

        Returns:
            Optional[List[str]]: Extracted labels or None if no labels exist

        """
        if not attributes:
            return None

        labels = []

        if (
            hasattr(attributes, "cvss")
            and attributes.cvss
            and hasattr(attributes.cvss, "cvssv3")
            and attributes.cvss.cvssv3
        ):
            cvss = attributes.cvss.cvssv3

            if hasattr(cvss, "attack_vector") and cvss.attack_vector:
                labels.append(f"attack-vector:{cvss.attack_vector}")

            if hasattr(cvss, "attack_complexity") and cvss.attack_complexity:
                labels.append(f"attack-complexity:{cvss.attack_complexity}")

            if hasattr(cvss, "privileges_required") and cvss.privileges_required:
                labels.append(f"privileges-required:{cvss.privileges_required}")

            if hasattr(cvss, "user_interaction") and cvss.user_interaction:
                labels.append(f"user-interaction:{cvss.user_interaction}")

        return labels if labels else None

    def _create_external_references(
        self, attributes: VulnerabilityModel
    ) -> Optional[List[Dict[str, str]]]:
        """Create external references from vulnerability attributes.

        Args:
            attributes: The vulnerability attributes

        Returns:
            Optional[List[dict]]: Created external references or None if no references exist

        """
        if not attributes:
            return None

        external_references = []

        cve_id = self.vulnerability.id

        if cve_id:
            nvd_reference = {
                "source_name": "nvd",
                "external_id": cve_id,
                "url": f"https://nvd.nist.gov/vuln/detail/{cve_id}",
            }
            external_references.append(nvd_reference)

        if hasattr(attributes, "link") and attributes.link:
            link_reference = {
                "source_name": "url",
                "url": attributes.link,
            }
            if not any(
                ref.get("url") == attributes.link for ref in external_references
            ):
                external_references.append(link_reference)

        if (
            hasattr(attributes, "cvss")
            and attributes.cvss
            and hasattr(attributes.cvss, "cvssv3")
            and attributes.cvss.cvssv3
            and hasattr(attributes.cvss.cvssv3, "vector_string")
            and attributes.cvss.cvssv3.vector_string
        ):
            cvss_reference = {
                "source_name": "cvss-v3",
                "description": attributes.cvss.cvssv3.vector_string,
            }
            external_references.append(cvss_reference)

        return external_references if external_references else None
