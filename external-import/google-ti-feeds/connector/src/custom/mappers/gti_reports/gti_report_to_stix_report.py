"""Converts a GTI report to a STIX report object."""

from datetime import datetime
from typing import List, Tuple

from connector.src.custom.models.gti_reports.gti_report_model import (
    GTIReportData,
    ReportModel,
)
from connector.src.stix.octi.models.report_model import OctiReportModel
from connector.src.stix.v21.models.cdts.external_reference_model import (
    ExternalReferenceModel,
)
from connector.src.stix.v21.models.ovs.report_type_ov_enums import ReportTypeOV
from stix2.v21 import Identity, Location, MarkingDefinition, Report  # type: ignore


class GTIReportToSTIXReport:
    """Converts a GTI report to a STIX report object."""

    def __init__(
        self,
        report: GTIReportData,
        organization: Identity,
        tlp_marking: MarkingDefinition,
        author_identity: Identity,
        sectors: List[Identity],
        locations: List[Location],
    ) -> None:
        """Initialize the GTIReportToSTIXReport object.

        Args:
            report (GTIReportData): The GTI report data to convert.
            organization (Identity): The organization identity object.
            tlp_marking (MarkingDefinition): The TLP marking definition.
            author_identity (Identity): The author identity object.
            sectors (List[Identity]): The list of sector identity objects.
            locations (List[Location]): The list of location objects.

        """
        self.report = report
        self.organization = organization
        self.tlp_marking = tlp_marking
        self.author_identity = author_identity
        self.sectors = sectors
        self.locations = locations

    def to_stix(self) -> Report:
        """Convert the GTI report to a STIX report object.

        Returns:
            Report: The STIX report object.

        """
        attributes = self.report.attributes

        name = attributes.name
        if len(name) < 2:
            raise ValueError("Report name must be at least 2 characters long")

        created, modified = self._get_timestamps(attributes)
        labels = self._extract_labels(attributes)
        external_references = self._build_external_references(attributes)
        report_type = self._determine_report_type(attributes)
        object_refs = self._collect_object_refs()

        report = OctiReportModel.create(
            name=name,
            created=created,
            modified=modified,
            description=attributes.autogenerated_summary,
            report_types=[report_type],
            published=created,
            object_refs=object_refs,
            organization_id=self.organization.id,
            marking_ids=[self.tlp_marking.id],
            labels=labels,
            external_references=[
                ref.model_dump(exclude_none=True) for ref in external_references
            ],
            content=attributes.content,
        )

        return report.to_stix2_object()

    def _get_timestamps(self, attributes: ReportModel) -> Tuple[datetime, datetime]:
        """Extract creation and modification timestamps from attributes.

        Args:
            attributes: The report attributes

        Returns:
            tuple: (created, modified) datetime objects

        """
        created = datetime.fromtimestamp(attributes.creation_date)
        modified = datetime.fromtimestamp(attributes.last_modification_date)
        return created, modified

    def _extract_labels(self, attributes: ReportModel) -> List[str]:
        """Extract labels from report attributes.

        Args:
            attributes: The report attributes

        Returns:
            list: Extracted labels

        """
        labels = []
        if attributes.intended_effects:
            labels.extend(attributes.intended_effects)
        if attributes.threat_scape:
            labels.extend(attributes.threat_scape)
        if attributes.motivations:
            for motivation in attributes.motivations:
                if motivation.value:
                    labels.append(motivation.value)
        return labels

    def _build_external_references(
        self, attributes: ReportModel
    ) -> List[ExternalReferenceModel]:
        """Build external references from report attributes.

        Args:
            attributes: The report attributes

        Returns:
            list: External references

        """
        external_references = []
        if attributes.link:
            external_reference = ExternalReferenceModel(
                source_name="Google Threat Intelligence",
                description="Google Threat Intelligence Report",
                url=attributes.link,
            )
            external_references.append(external_reference)
        return external_references

    def _determine_report_type(self, attributes: ReportModel) -> ReportTypeOV:
        """Determine the report type based on attributes.

        Args:
            attributes: The report attributes

        Returns:
            ReportTypeOV: The determined report type

        """
        report_type = ReportTypeOV.THREAT_REPORT
        if attributes.report_type:
            gti_to_stix_report_type = {
                "News": ReportTypeOV.THREAT_REPORT,
                "Actor Profile": ReportTypeOV.THREAT_ACTOR,
                "OSINT": ReportTypeOV.INDICATOR,
                "Vulnerability": ReportTypeOV.VULNERABILITY,
                "Campaign": ReportTypeOV.CAMPAIGN,
                "Malware": ReportTypeOV.MALWARE,
                "Tool": ReportTypeOV.TOOL,
            }
            report_type = gti_to_stix_report_type.get(
                attributes.report_type, ReportTypeOV.THREAT_REPORT
            )
        return report_type

    def _collect_object_refs(self) -> list[str]:
        """Collect object references from related objects.

        Returns:
            list: Collected object references

        """
        object_refs = []
        if self.author_identity:
            object_refs.append(self.author_identity.id)

        for sector in self.sectors:
            object_refs.append(sector.id)

        for location in self.locations:
            object_refs.append(location.id)

        return object_refs

    @staticmethod
    def add_object_refs(
        report_data: GTIReportData, objects_to_add: List[str]
    ) -> Report:
        """Add object references to an existing STIX report.

        Args:
            report_data: The report data to update.
            objects_to_add: Object ID(s) to add to the report's object_refs.

        Returns:
            Report: The updated STIX report.

        """
        attributes = report_data.attributes
        name = attributes.name
        if len(name) < 2:
            raise ValueError("Report name must be at least 2 characters long")

        created = datetime.fromtimestamp(attributes.creation_date)
        modified = datetime.fromtimestamp(attributes.last_modification_date)

        minimal_report = OctiReportModel.create_minimal(
            name=name,
            created=created,
            modified=modified,
            published=created,
            object_refs=objects_to_add,
        )

        return minimal_report.to_stix2_object()
