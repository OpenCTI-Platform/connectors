"""Converts a GTI report to a STIX report object."""

from datetime import datetime, timezone
from typing import List, Tuple

from connector.src.custom.models.gti_reports.gti_report_model import (
    GTIReportData,
    ReportModel,
)
from connector.src.stix.octi.models.report_model import OctiReportModel
from connector.src.stix.v21.models.cdts.external_reference_model import (
    ExternalReferenceModel,
)
from connector.src.stix.v21.models.ovs.report_type_ov_enums import ReportTypeOV
from connector.src.utils.converters.generic_converter_config import BaseMapper
from stix2.v21 import Identity, MarkingDefinition, Report  # type: ignore


class GTIReportToSTIXReport(BaseMapper):
    """Converts a GTI report to a STIX report object."""

    def __init__(
        self,
        report: GTIReportData,
        organization: Identity,
        tlp_marking: MarkingDefinition,
    ) -> None:
        """Initialize the GTIReportToSTIXReport object.

        Args:
            report (GTIReportData): The GTI report data to convert.
            organization (Identity): The organization identity object.
            tlp_marking (MarkingDefinition): The TLP marking definition.

        """
        self.report = report
        self.organization = organization
        self.tlp_marking = tlp_marking

    def to_stix(self) -> Report:
        """Convert the GTI report to a STIX report object.

        Returns:
            Report: The STIX report object.

        """
        if not hasattr(self.report, "attributes") or not self.report.attributes:
            raise ValueError("Invalid GTI report data")

        attributes = self.report.attributes

        name = attributes.name
        if len(name) < 2:
            raise ValueError("Report name must be at least 2 characters long")

        created, modified = self._get_timestamps(attributes)
        labels = self._extract_labels(attributes)
        external_references = self._build_external_references(attributes)
        report_type = self._determine_report_type(attributes)

        author_id = (
            self.author_identity.id
            if hasattr(self, "author_identity") and self.author_identity
            else self.organization.id
        )

        report = OctiReportModel.create(
            name=name,
            created=created,
            modified=modified,
            description=attributes.autogenerated_summary,
            report_types=[report_type],
            published=created,
            object_refs=[],
            organization_id=author_id,
            marking_ids=[self.tlp_marking.id],
            labels=labels,
            external_references=[
                ref.model_dump(exclude_none=True) for ref in external_references
            ],
            content=attributes.content,
        )

        return report

    def add_author_identity(self, author_identity: Identity) -> None:
        """Add or update the author identity for the report.

        Args:
            author_identity: The author identity to set

        """
        self.author_identity = author_identity

    @staticmethod
    def _get_timestamps(attributes: ReportModel) -> Tuple[datetime, datetime]:
        """Extract creation and modification timestamps from attributes.

        Args:
            attributes: The report attributes

        Returns:
            tuple: (created, modified) datetime objects

        """
        created = datetime.fromtimestamp(attributes.creation_date, tz=timezone.utc)
        modified = datetime.fromtimestamp(
            attributes.last_modification_date, tz=timezone.utc
        )

        return created, modified

    @staticmethod
    def _extract_labels(attributes: ReportModel) -> List[str]:
        """Extract labels from report attributes.

        Args:
            attributes: The report attributes

        Returns:
            list: Extracted labels

        """
        labels = []
        if attributes.intended_effects:
            labels.extend(attributes.intended_effects)
        if attributes.threat_scape:
            labels.extend(attributes.threat_scape)
        if attributes.motivations:
            for motivation in attributes.motivations:
                if motivation.value:
                    labels.append(motivation.value)
        return labels

    def _build_external_references(
        self, attributes: ReportModel
    ) -> List[ExternalReferenceModel]:
        """Build external references from report attributes.

        Args:
            attributes: The report attributes

        Returns:
            list: External references

        """
        external_references = []
        if attributes.link:
            external_reference = ExternalReferenceModel(
                source_name="Source link",
                description="Source link for the Report",
                url=attributes.link,
            )
            external_references.append(external_reference)

        if self.report.id:
            external_reference = ExternalReferenceModel(
                source_name="Google Threat Intelligence Platform",
                description="Google Threat Intelligence Report Link",
                url=f"https://www.virustotal.com/gui/collection/{self.report.id}",
            )
            external_references.append(external_reference)
        return external_references

    @staticmethod
    def _determine_report_type(attributes: ReportModel) -> ReportTypeOV:
        """Determine the report type based on attributes.

        Args:
            attributes: The report attributes

        Returns:
            ReportTypeOV: The determined report type

        """
        if attributes.report_type is None:
            return ReportTypeOV("unknown")
        return ReportTypeOV(attributes.report_type)

    @staticmethod
    def add_object_refs(objects_to_add: List[str], existing_report: Report) -> Report:
        """Add object references to an existing STIX report while preserving all report data.

        Args:
            objects_to_add: Object ID(s) to add to the report's object_refs.
            existing_report: The existing STIX report object to update.

        Returns:
            Report: The updated STIX report with all original data preserved.

        """
        if hasattr(existing_report, "object_refs"):
            updated_refs = (
                list(existing_report.object_refs) if existing_report.object_refs else []
            )
        else:
            updated_refs = (
                existing_report.get("object_refs", [])
                if hasattr(existing_report, "get")
                else []
            )

        for obj_id in objects_to_add:
            if obj_id not in updated_refs:
                updated_refs.append(obj_id)

        if hasattr(existing_report, "object_refs"):
            existing_report.object_refs = updated_refs
        else:
            existing_report["object_refs"] = updated_refs

        return existing_report
