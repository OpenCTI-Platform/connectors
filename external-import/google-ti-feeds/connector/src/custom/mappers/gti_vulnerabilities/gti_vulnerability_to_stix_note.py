"""Converts a GTI vulnerability's workaround data to STIX Note objects."""

from datetime import datetime, timezone
from typing import List

from connector.src.custom.models.gti.gti_vulnerability_model import (
    GTIVulnerabilityData,
    VulnerabilityModel,
)
from connector.src.stix.octi.models.note_model import OctiNoteModel
from connector.src.utils.converters.generic_converter_config import BaseMapper
from connectors_sdk.models.octi import (  # type: ignore[import-untyped]
    OrganizationAuthor,
    TLPMarking,
)
from markdownify import markdownify as md  # type: ignore[import-untyped]
from stix2.v21 import Note  # type: ignore


class GTIVulnerabilityToSTIXNote(BaseMapper):
    """Converts a GTI vulnerability's workaround data to STIX Note objects."""

    def __init__(
        self,
        vulnerability: GTIVulnerabilityData,
        organization: OrganizationAuthor,
        tlp_marking: TLPMarking,
    ):
        """Initialize the GTIVulnerabilityToSTIXNote object.

        Args:
            vulnerability (GTIVulnerabilityData): The GTI vulnerability data to convert.
            organization (OrganizationAuthor): The organization identity object.
            tlp_marking (TLPMarking): The TLP marking definition.

        """
        self.vulnerability = vulnerability
        self.organization = organization
        self.tlp_marking = tlp_marking

    def to_stix(self) -> List[Note]:
        """Convert the GTI vulnerability workaround data to STIX Note objects.

        Returns:
            List[Note]: The list of STIX Note objects created from workaround data.

        """
        result: List[Note] = []

        if not self.vulnerability or not self.vulnerability.attributes:
            return result

        attributes = self.vulnerability.attributes
        if not attributes.workarounds:
            return result

        created, modified = self._extract_timestamps(attributes)

        for i, workaround in enumerate(attributes.workarounds):
            if workaround and workaround.strip():
                markdown_workaround = self._convert_html_to_markdown(workaround)
                note = self._create_workaround_note(
                    markdown_workaround, i + 1, created, modified
                )
                if note:
                    result.append(note)

        return result

    def _create_workaround_note(
        self, workaround: str, index: int, created: datetime, modified: datetime
    ) -> Note:
        """Create a Note object from workaround text.

        Args:
            workaround (str): The workaround text content.
            index (int): The index of the workaround for unique naming.
            created (datetime): When the note was created.
            modified (datetime): When the note was last modified.

        Returns:
            Note: The STIX Note object representing the workaround.

        """
        abstract = workaround[:97] + "..." if len(workaround) > 100 else workaround

        labels = ["workaround"]

        note = OctiNoteModel.create(
            content=workaround,
            created=created,
            modified=modified,
            organization_id=self.organization.id,
            marking_ids=[self.tlp_marking.id],
            object_refs=[],
            abstract=abstract,
            authors=["Google Threat Intelligence"],
            labels=labels,
            external_references=self._build_external_references(index),
        )

        return note

    def _extract_timestamps(
        self, attributes: VulnerabilityModel
    ) -> tuple[datetime, datetime]:
        """Extract creation and modification timestamps from attributes.

        Args:
            attributes: The vulnerability attributes

        Returns:
            tuple[datetime, datetime]: (created, modified) datetime objects

        """
        try:
            created = datetime.fromtimestamp(attributes.creation_date, tz=timezone.utc)
        except (OSError, ValueError, OverflowError):
            created = datetime.now(timezone.utc)

        try:
            modified = datetime.fromtimestamp(
                attributes.last_modification_date, tz=timezone.utc
            )
        except (OSError, ValueError, OverflowError):
            modified = datetime.now(timezone.utc)

        return created, modified

    def _build_external_references(self, index: int) -> List[dict[str, str]]:
        """Build external references for the workaround note.

        Args:
            index (int): The index of the workaround.

        Returns:
            List[dict]: External references for the note.

        """
        external_references = []

        if self.vulnerability.id and self.vulnerability.attributes:
            vulnerability_name = self.vulnerability.attributes.name or "Unknown"
            external_reference = {
                "source_name": f"[GTI] Vulnerability {vulnerability_name} - Workaround {index}",
                "description": "Google Threat Intelligence Vulnerability Workaround",
                "url": f"https://www.virustotal.com/gui/collection/{self.vulnerability.id}",
            }
            external_references.append(external_reference)

        return external_references

    def _convert_html_to_markdown(self, html_content: str) -> str:
        """Convert HTML content to Markdown format.

        Args:
            html_content (str): The HTML content to convert.

        Returns:
            str: The converted Markdown content.

        """
        if not html_content or not html_content.strip():
            return html_content

        try:
            markdown_content = md(
                html_content,
                heading_style="ATX",
            ).strip()

            return markdown_content if markdown_content else html_content
        except Exception:
            return html_content
