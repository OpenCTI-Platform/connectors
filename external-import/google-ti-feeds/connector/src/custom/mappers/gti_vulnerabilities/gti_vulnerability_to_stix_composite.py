"""Composite mapper that handles vulnerability to software, notes, and relationships conversion in one step."""

from datetime import datetime, timezone
from typing import Any, List

from connector.src.custom.mappers.gti_vulnerabilities.gti_vulnerability_to_stix_note import (
    GTIVulnerabilityToSTIXNote,
)
from connector.src.custom.mappers.gti_vulnerabilities.gti_vulnerability_to_stix_software import (
    GTIVulnerabilityToSTIXSoftware,
)
from connector.src.custom.mappers.gti_vulnerabilities.gti_vulnerability_to_stix_vulnerability import (
    GTIVulnerabilityToSTIXVulnerability,
)
from connector.src.custom.models.gti.gti_vulnerability_model import (
    GTIVulnerabilityData,
    VulnerabilityModel,
)
from connector.src.stix.octi.models.relationship_model import OctiRelationshipModel
from connector.src.utils.converters.generic_converter_config import BaseMapper
from connectors_sdk.models.octi import (  # type: ignore[import-untyped]
    OrganizationAuthor,
    TLPMarking,
)


class GTIVulnerabilityToSTIXComposite(BaseMapper):
    """Composite mapper that converts a GTI vulnerability to vulnerability, software from CPE, notes from workarounds, and relationships."""

    def __init__(
        self,
        vulnerability: GTIVulnerabilityData,
        organization: OrganizationAuthor,
        tlp_marking: TLPMarking,
        get_related_softwares: bool = True,
    ) -> None:
        """Initialize the composite mapper.

        Args:
            vulnerability: The GTI vulnerability data to convert
            organization: The organization identity object
            tlp_marking: The TLP marking definition
            get_related_softwares: Whether to create software objects from CPE data

        """
        self.vulnerability = vulnerability
        self.organization = organization
        self.tlp_marking = tlp_marking
        self.get_related_softwares = get_related_softwares

    def to_stix(self) -> List[Any]:
        """Convert the GTI vulnerability to a list of STIX objects (vulnerability, software, notes, relationships).

        Returns:
            List of STIX objects in order: [vulnerability, software_objects..., notes..., relationships...]

        """
        all_entities = []

        # Create the main vulnerability object
        vulnerability_mapper = GTIVulnerabilityToSTIXVulnerability(
            vulnerability=self.vulnerability,
            organization=self.organization,
            tlp_marking=self.tlp_marking,
        )
        vulnerability_obj = vulnerability_mapper.to_stix()
        all_entities.append(vulnerability_obj)

        # Create software objects from CPE data (if enabled)
        software_objects = []
        if self.get_related_softwares:
            software_mapper = GTIVulnerabilityToSTIXSoftware(
                vulnerability=self.vulnerability,
                organization=self.organization,
                tlp_marking=self.tlp_marking,
            )
            software_objects = software_mapper.to_stix()
            all_entities.extend(software_objects)

        # Create note objects from workarounds
        note_mapper = GTIVulnerabilityToSTIXNote(
            vulnerability=self.vulnerability,
            organization=self.organization,
            tlp_marking=self.tlp_marking,
        )
        note_objects = note_mapper.to_stix()

        # Update note objects to reference the vulnerability
        for note in note_objects:
            if hasattr(note, "object_refs"):
                note.object_refs = [vulnerability_obj.id]

        all_entities.extend(note_objects)

        # Create relationships
        relationships = self._create_relationships(
            vulnerability_obj, software_objects, note_objects
        )
        all_entities.extend(relationships)

        return all_entities

    def _create_relationships(
        self,
        vulnerability_obj: Any,
        software_objects: List[Any],
        note_objects: List[Any],
    ) -> List[Any]:
        """Create relationships between the vulnerability and other entities.

        Args:
            vulnerability_obj: The vulnerability object
            software_objects: List of software objects
            note_objects: List of note objects

        Returns:
            List of relationship objects

        """
        relationships: List[Any] = []

        if not self.vulnerability.attributes:
            return relationships

        attributes = self.vulnerability.attributes
        created, modified = self._extract_timestamps(attributes)

        for software in software_objects:
            relationship = OctiRelationshipModel.create(
                relationship_type="has",
                source_ref=software.id,
                target_ref=vulnerability_obj.id,
                organization_id=self.organization.id,
                marking_ids=[self.tlp_marking.id],
                created=created,
                modified=modified,
                description=f"Software '{software.name}' is affected by vulnerability '{attributes.name}'",
            )
            relationships.append(relationship)

        return relationships

    def _extract_timestamps(
        self, attributes: VulnerabilityModel
    ) -> tuple[datetime, datetime]:
        """Extract creation and modification timestamps from attributes.

        Args:
            attributes: The vulnerability attributes

        Returns:
            tuple[datetime, datetime]: (created, modified) datetime objects

        """
        try:
            created = datetime.fromtimestamp(attributes.creation_date, tz=timezone.utc)
        except (OSError, ValueError, OverflowError):
            created = datetime.now(timezone.utc)

        try:
            modified = datetime.fromtimestamp(
                attributes.last_modification_date, tz=timezone.utc
            )
        except (OSError, ValueError, OverflowError):
            modified = datetime.now(timezone.utc)

        return created, modified
