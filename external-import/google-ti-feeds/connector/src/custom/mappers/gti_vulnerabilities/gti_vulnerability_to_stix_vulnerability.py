"""Converts a GTI vulnerability to a STIX vulnerability object."""

import re
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional

from connector.src.custom.models.gti.gti_vulnerability_model import (
    GTIVulnerabilityData,
    VulnerabilityModel,
)
from connector.src.stix.octi.models.relationship_model import OctiRelationshipModel
from connector.src.stix.octi.models.vulnerability_model import OctiVulnerabilityModel
from connector.src.utils.converters.generic_converter_config import BaseMapper
from connectors_sdk.models.octi import (  # type: ignore[import-untyped]
    OrganizationAuthor,
    TLPMarking,
)
from stix2.v21 import Vulnerability  # type: ignore


class GTIVulnerabilityToSTIXVulnerability(BaseMapper):
    """Converts a GTI vulnerability to a STIX vulnerability object."""

    @staticmethod
    def create_relationship(
        src_entity: Any, relation_type: str, target_entity: Any
    ) -> Any:
        """Create a relationship between an intrusion set and vulnerability.

        Args:
            src_entity: The source entity
            relation_type: The relationship type
            target_entity: The target entity

        Returns:
            OctiRelationshipModel: The relationship object

        """
        if not any(
            "Vulnerability" in str(type(entity).__name__)
            for entity in [src_entity, target_entity]
        ):
            return None

        return OctiRelationshipModel.create(
            relationship_type=relation_type,
            source_ref=src_entity.id,
            target_ref=target_entity.id,
            organization_id=src_entity.created_by_ref,
            marking_ids=src_entity.object_marking_refs,
            created=datetime.now(),
            modified=datetime.now(),
            description=f"{type(src_entity).__name__} {relation_type} {type(target_entity).__name__}",
        )

    def __init__(
        self,
        vulnerability: GTIVulnerabilityData,
        organization: OrganizationAuthor,
        tlp_marking: TLPMarking,
    ) -> None:
        """Initialize the GTIVulnerabilityToSTIXVulnerability object.

        Args:
            vulnerability (GTIVulnerabilityData): The GTI vulnerability data to convert.
            organization (OrganizationAuthor): The organization author object.
            tlp_marking (TLPMarking): The TLP marking definition.

        """
        self.vulnerability = vulnerability
        self.organization = organization
        self.tlp_marking = tlp_marking

    def to_stix(self) -> Vulnerability:
        """Convert the GTI vulnerability to a STIX vulnerability object.

        Returns:
            Vulnerability: The STIX vulnerability object.

        """
        if not self.vulnerability or not self.vulnerability.attributes:
            raise ValueError("Vulnerability attributes are missing")

        attributes = self.vulnerability.attributes
        created, modified = self._extract_timestamps(attributes)
        cvss_data = self._extract_cvss_data(attributes)
        epss_score, epss_percentile = self._extract_epss_data(attributes)
        cwe_id = self._extract_cwe_id(attributes)
        labels = self._extract_labels(attributes)
        external_references = self._create_external_references(attributes)
        base_score = self._extract_base_score(cvss_data)
        additional_custom_properties = self._build_custom_properties(cvss_data, cwe_id)

        vulnerability_model = OctiVulnerabilityModel.create(
            name=attributes.name,
            cve_id=self.vulnerability.id,
            organization_id=self.organization.id,
            marking_ids=[self.tlp_marking.id],
            description=attributes.description,
            created=created,
            modified=modified,
            base_score=base_score,
            epss_score=epss_score,
            epss_percentile=epss_percentile,
            labels=labels,
            external_references=external_references,
            custom_properties=additional_custom_properties,
        )

        return vulnerability_model

    def _extract_timestamps(
        self, attributes: VulnerabilityModel
    ) -> tuple[datetime, datetime]:
        """Extract creation and modification timestamps from attributes."""
        try:
            created = datetime.fromtimestamp(attributes.creation_date, tz=timezone.utc)
        except (OSError, ValueError, OverflowError):
            created = datetime.now(timezone.utc)

        try:
            modified = datetime.fromtimestamp(
                attributes.last_modification_date, tz=timezone.utc
            )
        except (OSError, ValueError, OverflowError):
            modified = datetime.now(timezone.utc)

        return created, modified

    def _extract_epss_data(
        self, attributes: VulnerabilityModel
    ) -> tuple[float | None, float | None]:
        """Extract EPSS score and percentile from attributes."""
        epss_score = None
        epss_percentile = None
        if hasattr(attributes, "epss") and attributes.epss:
            if hasattr(attributes.epss, "score"):
                epss_score = attributes.epss.score
            if hasattr(attributes.epss, "percentile"):
                epss_percentile = attributes.epss.percentile
        return epss_score, epss_percentile

    def _extract_cwe_id(self, attributes: VulnerabilityModel) -> str | None:
        """Extract CWE ID from attributes."""
        if (
            hasattr(attributes, "cwe")
            and attributes.cwe
            and hasattr(attributes.cwe, "id")
        ):
            return attributes.cwe.id
        return None

    def _extract_base_score(self, cvss_data: Dict[str, Any]) -> float | None:
        """Extract base score from CVSS data."""
        return cvss_data.get("cvssv3_x_base_score")

    def _build_custom_properties(
        self, cvss_data: Dict[str, Any], cwe_id: str | None
    ) -> Dict[str, Any]:
        """Build additional custom properties from CVSS data and CWE ID."""
        additional_custom_properties = {}

        if cwe_id is not None:
            additional_custom_properties["x_opencti_cwe"] = cwe_id

        self._add_cvssv2_properties(additional_custom_properties, cvss_data)
        self._add_cvssv3_properties(additional_custom_properties, cvss_data)
        self._add_cvssv4_properties(additional_custom_properties, cvss_data)

        return additional_custom_properties

    def _add_cvssv2_properties(
        self, properties: Dict[str, Any], cvss_data: Dict[str, Any]
    ) -> None:
        """Add CVSS v2 properties to custom properties."""
        if cvss_data.get("cvssv2_0_base_score") is not None:
            properties["x_opencti_cvss_v2_base_score"] = cvss_data[
                "cvssv2_0_base_score"
            ]
        if cvss_data.get("cvssv2_0_vector") is not None:
            properties["x_opencti_cvss_v2_vector_string"] = cvss_data["cvssv2_0_vector"]
        if cvss_data.get("cvssv2_0_temporal_score") is not None:
            properties["x_opencti_cvss_v2_temporal_score"] = cvss_data[
                "cvssv2_0_temporal_score"
            ]

    def _add_cvssv3_properties(
        self, properties: Dict[str, Any], cvss_data: Dict[str, Any]
    ) -> None:
        """Add CVSS v3 properties to custom properties."""
        if cvss_data.get("cvssv3_x_vector") is not None:
            properties["x_opencti_cvss_vector_string"] = cvss_data["cvssv3_x_vector"]
        if cvss_data.get("cvssv3_x_temporal_score") is not None:
            properties["x_opencti_cvss_temporal_score"] = cvss_data[
                "cvssv3_x_temporal_score"
            ]

    def _add_cvssv4_properties(
        self, properties: Dict[str, Any], cvss_data: Dict[str, Any]
    ) -> None:
        """Add CVSS v4 properties to custom properties."""
        if cvss_data.get("cvssv4_x_score") is not None:
            properties["x_opencti_cvss_v4_base_score"] = cvss_data["cvssv4_x_score"]
        if cvss_data.get("cvssv4_x_vector") is not None:
            properties["x_opencti_cvss_v4_vector_string"] = cvss_data["cvssv4_x_vector"]
        if cvss_data.get("cvssv4_x_exploit_maturity") is not None:
            properties["x_opencti_cvss_v4_exploit_maturity"] = cvss_data[
                "cvssv4_x_exploit_maturity"
            ]

    def _extract_cvss_data(self, attributes: VulnerabilityModel) -> Dict[str, Any]:
        """Extract all CVSS data from vulnerability attributes.

        Args:
            attributes: The vulnerability attributes

        Returns:
            Dict[str, Any]: Dictionary containing all CVSS data

        """
        cvss_data: Dict[str, Any] = {}

        if not hasattr(attributes, "cvss") or not attributes.cvss:
            return cvss_data

        cvss = attributes.cvss

        self._extract_cvssv2_data(cvss, cvss_data)
        self._extract_cvssv3_data(cvss, cvss_data)
        self._extract_cvssv4_data(cvss, cvss_data)

        return cvss_data

    def _extract_cvssv2_data(self, cvss: Any, cvss_data: Dict[str, Any]) -> None:
        """Extract CVSS v2.0 data from cvss object."""
        if hasattr(cvss, "cvssv2_0") and cvss.cvssv2_0:
            cvssv2_0 = cvss.cvssv2_0
            if hasattr(cvssv2_0, "base_score") and cvssv2_0.base_score is not None:
                cvss_data["cvssv2_0_base_score"] = cvssv2_0.base_score
            if hasattr(cvssv2_0, "vector") and cvssv2_0.vector:
                cvss_data["cvssv2_0_vector"] = cvssv2_0.vector
            if (
                hasattr(cvssv2_0, "temporal_score")
                and cvssv2_0.temporal_score is not None
            ):
                cvss_data["cvssv2_0_temporal_score"] = cvssv2_0.temporal_score

    def _extract_cvssv3_data(self, cvss: Any, cvss_data: Dict[str, Any]) -> None:
        """Extract CVSS v3.x data from cvss object."""
        if hasattr(cvss, "cvssv3_x") and cvss.cvssv3_x:
            cvssv3_x = cvss.cvssv3_x
            if hasattr(cvssv3_x, "base_score") and cvssv3_x.base_score is not None:
                cvss_data["cvssv3_x_base_score"] = cvssv3_x.base_score
            if hasattr(cvssv3_x, "vector") and cvssv3_x.vector:
                if cvssv3_x.vector.startswith("CVSS:3."):
                    cvssv3_x.vector = re.sub(
                        r"^CVSS:3\.\d+/", "CVSS:3.1/", cvssv3_x.vector
                    )
                cvss_data["cvssv3_x_vector"] = cvssv3_x.vector
            if (
                hasattr(cvssv3_x, "temporal_score")
                and cvssv3_x.temporal_score is not None
            ):
                cvss_data["cvssv3_x_temporal_score"] = cvssv3_x.temporal_score

    def _extract_cvssv4_data(self, cvss: Any, cvss_data: Dict[str, Any]) -> None:
        """Extract CVSS v4.x data from cvss object."""
        if hasattr(cvss, "cvssv4_x") and cvss.cvssv4_x:
            cvssv4_x = cvss.cvssv4_x
            if hasattr(cvssv4_x, "score") and cvssv4_x.score is not None:
                cvss_data["cvssv4_x_score"] = cvssv4_x.score
            if hasattr(cvssv4_x, "vector") and cvssv4_x.vector:
                cvss_data["cvssv4_x_vector"] = cvssv4_x.vector
            if hasattr(cvssv4_x, "threat") and cvssv4_x.threat:
                if (
                    hasattr(cvssv4_x.threat, "exploit_maturity")
                    and cvssv4_x.threat.exploit_maturity
                ):
                    cvss_data["cvssv4_x_exploit_maturity"] = (
                        cvssv4_x.threat.exploit_maturity
                    )

    @staticmethod
    def _extract_labels(attributes: VulnerabilityModel) -> Optional[List[str]]:
        """Extract labels from vulnerability tags_details.

        Args:
            attributes: The vulnerability attributes

        Returns:
            Optional[List[str]]: Extracted labels or None if no labels exist

        """
        if not hasattr(attributes, "tags_details") or not attributes.tags_details:
            return None

        labels = []
        for tag_detail in attributes.tags_details:
            if hasattr(tag_detail, "value") and tag_detail.value:
                labels.append(tag_detail.value)

        return labels if labels else None

    def _create_external_references(
        self, attributes: VulnerabilityModel
    ) -> Optional[List[Dict[str, str]]]:
        """Create external references from vulnerability attributes.

        Args:
            attributes: The vulnerability attributes

        Returns:
            Optional[List[dict]]: Created external references or None if no references exist

        """
        if not attributes:
            return None

        external_references = []

        if self.vulnerability.id:
            gti_reference = {
                "source_name": f"[GTI] Vulnerability {attributes.name}",
                "description": "Google Threat Intelligence Vulnerability Link",
                "url": f"https://www.virustotal.com/gui/collection/{self.vulnerability.id}",
            }
            external_references.append(gti_reference)

        return external_references if external_references else None
