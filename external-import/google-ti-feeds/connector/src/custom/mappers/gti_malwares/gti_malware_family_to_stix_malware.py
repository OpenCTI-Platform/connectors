"""Converts a GTI malware family to a STIX malware object."""

from datetime import datetime, timezone
from typing import Any, List, Optional

from connector.src.custom.models.gti.gti_malware_family_model import (
    GTIMalwareFamilyData,
    MalwareFamilyModel,
)
from connector.src.stix.octi.models.malware_model import OctiMalwareModel
from connector.src.stix.octi.models.relationship_model import OctiRelationshipModel
from connector.src.stix.v21.models.cdts.external_reference_model import (
    ExternalReferenceModel,
)
from connector.src.stix.v21.models.ovs.malware_capabilities_ov_enums import (
    MalwareCapabilitiesOV,
)
from connector.src.stix.v21.models.ovs.malware_type_ov_enums import MalwareTypeOV
from connector.src.utils.converters.generic_converter_config import BaseMapper
from connectors_sdk.models.octi import (  # type: ignore[import-untyped]
    OrganizationAuthor,
    TLPMarking,
)
from stix2.v21 import Malware  # type: ignore


class GTIMalwareFamilyToSTIXMalware(BaseMapper):
    """Converts a GTI malware family to a STIX malware object."""

    @staticmethod
    def create_relationship(
        src_entity: Any, relation_type: str, target_entity: Any
    ) -> Any:
        """Create a relationship between an intrusion set and malware.

        Args:
            src_entity: The source entity
            relation_type: The relationship type
            target_entity: The target entity

        Returns:
            OctiRelationshipModel: The relationship object

        """
        if not any(
            "Malware" in str(type(entity).__name__)
            for entity in [src_entity, target_entity]
        ):
            return None

        return OctiRelationshipModel.create(
            relationship_type=relation_type,
            source_ref=src_entity.id,
            target_ref=target_entity.id,
            organization_id=src_entity.created_by_ref,
            marking_ids=src_entity.object_marking_refs,
            created=datetime.now(),
            modified=datetime.now(),
            description=f"{type(src_entity).__name__} {relation_type} {type(target_entity).__name__}",
        )

    def __init__(
        self,
        malware_family: GTIMalwareFamilyData,
        organization: OrganizationAuthor,
        tlp_marking: TLPMarking,
    ) -> None:
        """Initialize the GTIMalwareFamilyToSTIXMalware object.

        Args:
            malware_family (GTIMalwareFamilyData): The GTI malware family data to convert.
            organization (OrganizationAuthor): The organization author object.
            tlp_marking (TLPMarking): The TLP marking definition.

        """
        self.malware_family = malware_family
        self.organization = organization
        self.tlp_marking = tlp_marking

    def to_stix(self) -> Malware:
        """Convert the GTI malware family to a STIX malware object.

        Returns:
            Malware: The STIX malware object.

        """
        if (
            not hasattr(self.malware_family, "attributes")
            or not self.malware_family.attributes
        ):
            raise ValueError("Invalid GTI malware family data")

        attributes = self.malware_family.attributes

        created = datetime.fromtimestamp(attributes.creation_date, tz=timezone.utc)
        modified = datetime.fromtimestamp(
            attributes.last_modification_date, tz=timezone.utc
        )

        # aliases = self._extract_aliases(attributes)

        malware_types = self._extract_malware_types(attributes)

        first_seen, last_seen = self._extract_seen_dates(attributes)

        labels = self._extract_labels(attributes)

        capabilities = self._extract_capabilities(attributes)

        external_references = self._build_external_references()

        malware_model = OctiMalwareModel.create(
            name=attributes.name,
            organization_id=self.organization.id,
            marking_ids=[self.tlp_marking.id],
            malware_types=malware_types,
            is_family=True,
            description=attributes.description,
            # aliases=aliases,
            first_seen=first_seen,
            last_seen=last_seen,
            labels=labels,
            capabilities=capabilities,
            created=created,
            modified=modified,
            external_references=[
                ref.model_dump(exclude_none=True) for ref in external_references
            ],
        )

        return malware_model

    @staticmethod
    def _extract_aliases(attributes: MalwareFamilyModel) -> Optional[List[str]]:
        """Extract aliases from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            Optional[List[str]]: Extracted aliases or None if no aliases exist

        """
        if (
            not hasattr(attributes, "alt_names_details")
            or not attributes.alt_names_details
        ):
            return None

        aliases = []
        for alt_name in attributes.alt_names_details:
            if hasattr(alt_name, "value") and alt_name.value:
                aliases.append(alt_name.value)

        return aliases if aliases else None

    def _extract_malware_types(
        self, attributes: MalwareFamilyModel
    ) -> List[MalwareTypeOV]:
        """Extract malware types from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            List[MalwareTypeOV]: Extracted malware types

        """
        malware_types = []
        if hasattr(attributes, "malware_roles") and attributes.malware_roles:
            for role in attributes.malware_roles:
                if hasattr(role, "value") and role.value:
                    malware_types.append(MalwareTypeOV(role.value))

        if not malware_types:
            malware_types.append(MalwareTypeOV.UNKNOWN)

        return malware_types

    @staticmethod
    def _extract_seen_dates(
        attributes: MalwareFamilyModel,
    ) -> tuple[Optional[datetime], Optional[datetime]]:
        """Extract first_seen and last_seen dates from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            tuple: (first_seen, last_seen) datetime objects or None if dates don't exist

        """
        first_seen = None
        if (
            hasattr(attributes, "first_seen_details")
            and attributes.first_seen_details
            and len(attributes.first_seen_details) > 0
            and hasattr(attributes.first_seen_details[0], "values")
        ):
            first_seen = attributes.first_seen_details[0].values

        last_seen = None
        if (
            hasattr(attributes, "last_seen_details")
            and attributes.last_seen_details
            and len(attributes.last_seen_details) > 0
            and hasattr(attributes.last_seen_details[0], "values")
        ):
            last_seen = attributes.last_seen_details[0].values

        return first_seen, last_seen

    @staticmethod
    def _extract_labels(attributes: MalwareFamilyModel) -> Optional[List[str]]:
        """Extract labels from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            Optional[List[str]]: Extracted labels or None if no labels exist

        """
        if not hasattr(attributes, "tags_details") or not attributes.tags_details:
            return None

        labels = []
        for tag in attributes.tags_details:
            if hasattr(tag, "value") and tag.value:
                labels.append(tag.value)

        return labels if labels else None

    def _extract_capabilities(
        self, attributes: MalwareFamilyModel
    ) -> Optional[List[MalwareCapabilitiesOV]]:
        """Extract capabilities from malware family attributes.

        Args:
            attributes: The malware family attributes

        Returns:
            Optional[List[MalwareCapabilitiesOV]]: Extracted capabilities or None if no capabilities exist

        """
        if not hasattr(attributes, "capabilities") or not attributes.capabilities:
            return None

        capabilities = []
        for capability in attributes.capabilities:
            if hasattr(capability, "value") and capability.value:
                capabilities.append(MalwareCapabilitiesOV(capability.value))

        return capabilities if capabilities else None

    def _build_external_references(self) -> List[ExternalReferenceModel]:
        """Build external references from Malware Family attributes.

        Returns:
            list: External references

        """
        external_references = []
        if self.malware_family.id and self.malware_family.attributes:
            if (
                hasattr(self.malware_family.attributes, "name")
                and self.malware_family.attributes.name
            ):
                external_reference = ExternalReferenceModel(
                    source_name=f"[GTI] Malware Family {self.malware_family.attributes.name}",
                    description="Google Threat Intelligence Malware Family Link",
                    url=f"https://www.virustotal.com/gui/collection/{self.malware_family.id}",
                )
            external_references.append(external_reference)
        return external_references
