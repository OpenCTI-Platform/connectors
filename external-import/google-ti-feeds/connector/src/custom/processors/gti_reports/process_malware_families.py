"""Processor module will be in charge of converting the Google Threat Intelligence feeds malware families into STIX2.1 SDO malware entities.
This module will also handle the relationships between malware and reports.

The processed entities will be sent into a broker queue for further ingestion.
"""

import asyncio
import logging
from typing import TYPE_CHECKING, List, Optional

from connector.src.custom.interfaces.base_processor import BaseProcessor
from connector.src.custom.mappers.gti_reports.gti_malware_family_to_stix_malware import (
    GTIMalwareFamilyToSTIXMalware,
)
from connector.src.custom.mappers.gti_reports.gti_report_to_stix_report import (
    GTIReportToSTIXReport,
)
from connector.src.custom.meta.gti_reports.reports_meta import (
    EVENT_MAP,
    FINAL_BROKER,
    MALWARE_FAMILIES_BROKER,
    SENTINEL,
)
from connector.src.octi.pubsub import broker

if TYPE_CHECKING:
    from connector.src.custom.models.gti_reports.gti_malware_family_model import (
        GTIMalwareFamilyData,
    )
    from connector.src.custom.models.gti_reports.gti_report_model import GTIReportData
    from logger import Logger  # type: ignore
    from stix2.v21 import Identity, Malware, MarkingDefinition  # type: ignore


LOG_PREFIX = "[Process Malware Families]"


class ProcessMalwareFamilies(BaseProcessor):
    """The class will define all the necessary methods to process Google Threat Intelligence feeds malware families into STIX2.1 SDO malware entities.
    This class will also handle the relationships between malware and reports.
    """

    def __init__(
        self,
        organization: "Identity",
        tlp_marking: "MarkingDefinition",
        logger: Optional["Logger"] = None,
    ) -> None:
        """Initialize the class with a subscription to the broker queue receiving the malware families.

        Args:
            organization (Identity): The organization of the reports.
            tlp_marking (MarkingDefinition): The TLP marking to use for the reports.
            logger (Optional[Logger], optional): The logger to use. Defaults to None.

        """
        self.queue = broker.subscribe(f"{MALWARE_FAMILIES_BROKER}")
        self.organization = organization
        self.tlp_marking = tlp_marking
        self._logger = logger or logging.getLogger(__name__)

    async def process(self) -> bool:
        """Process the malware families received from the broker queue.

        Returns:
            bool: True if the processing was successful, False otherwise.

        """
        while True:
            data = await self.queue.get()
            try:
                if data is SENTINEL:
                    break

                report_data, malware_families = data

                await self._convert_malware_families_to_stix21(
                    report_data, malware_families
                )
            except Exception as e:
                self._logger.error(
                    f"{LOG_PREFIX} Error processing malware families.",
                    meta={"error": str(e)},
                )  # type: ignore[call-arg]
                return False
            finally:
                self.queue.task_done()
        return True

    async def _convert_malware_families_to_stix21(
        self,
        report_data: "GTIReportData",
        malware_families_data: List["GTIMalwareFamilyData"],
    ) -> None:
        """Convert the malware families into STIX2.1 SDO malware pydantic models and update the report's object_refs.

        Args:
            report_data: The report data associated with the malware families.
            malware_families_data: The malware families data to convert.

        """
        try:
            self._logger.info(
                f"{LOG_PREFIX} Converting malware families to STIX2.1 entities and updating associated report."
            )

            stix21_malware_list = [
                self._process_malware_family(malware_family_data)
                for malware_family_data in malware_families_data
            ]
            if stix21_malware_list:
                stix21_malware_list_ids = [
                    malware.id for malware in stix21_malware_list
                ]
                updated_report = GTIReportToSTIXReport.add_object_refs(
                    report_data, stix21_malware_list_ids
                )

                while updated_report.id not in EVENT_MAP:
                    await asyncio.sleep(0.01)
                await EVENT_MAP[updated_report.id].wait()

                await broker.publish(FINAL_BROKER, stix21_malware_list)
                await broker.publish(FINAL_BROKER, updated_report)

                self._logger.info(
                    f"{LOG_PREFIX} Malware families processed and relationships created with report: {report_data.attributes.name}."
                )
        except Exception as ex:
            self._logger.error(  # type: ignore[call-arg]
                f"{LOG_PREFIX} Error converting malware family to STIX2.1.",
                meta={"error": str(ex)},
            )
            raise

    def _process_malware_family(
        self, malware_family_data: "GTIMalwareFamilyData"
    ) -> "Malware":
        """Process malware family into STIX malware.

        Args:
            malware_family_data: The malware family data to process.

        Returns:
            Malware: The STIX malware object.

        """
        try:
            self._logger.debug(
                f"{LOG_PREFIX} Processing malware family into STIX malware."
            )
            stix21_malware: "Malware" = GTIMalwareFamilyToSTIXMalware(
                malware_family_data, self.organization, self.tlp_marking
            ).to_stix()
            self._logger.debug(
                f"{LOG_PREFIX} Malware family processed into STIX malware."
            )
            return stix21_malware
        except Exception as ex:
            self._logger.error(  # type: ignore[call-arg]
                f"{LOG_PREFIX} Error processing malware family into STIX malware.",
                meta={"error": str(ex), "malware_family_id": malware_family_data.id},
            )
            raise
