"""Vulnerability-specific converter for fetching and processing vulnerability data."""

import logging
from typing import Any, List

from connector.src.custom.configs import (
    GTIConfig,
)
from connector.src.custom.convert_to_stix.convert_to_stix_base import BaseConvertToSTIX

LOG_PREFIX = "[ConvertToSTIXVulnerability]"


class ConvertToSTIXVulnerability(BaseConvertToSTIX):
    """Vulnerability-specific converter for fetching and processing vulnerability data."""

    def __init__(self, config: GTIConfig, logger: logging.Logger, tlp_level: str):
        """Initialize Vulnerability Converter."""
        super().__init__(config, logger, tlp_level)

    def convert_vulnerability_to_stix(self, vulnerability_data: Any) -> List[Any]:
        """Convert vulnerability to STIX objects.

        Args:
            vulnerability_data: GTIVulnerabilityData object from fetcher

        Returns:
            List of STIX entities (vulnerability)

        """
        try:
            additional_deps = {}
            if hasattr(self.config, "vulnerability_get_related_softwares"):
                additional_deps["get_related_softwares"] = (
                    self.config.vulnerability_get_related_softwares
                )

            converter = self.converter_factory.create_converter_by_name(
                "vulnerability", additional_dependencies=additional_deps
            )
            stix_entities = converter.convert_single(vulnerability_data)

            if not isinstance(stix_entities, list):
                stix_entities = [stix_entities]

            self.logger.debug(
                "Converted vulnerability to STIX entities",
                {"prefix": LOG_PREFIX, "entity_count": len(stix_entities)},
            )
            return stix_entities

        except Exception as e:
            self.logger.warning(
                "Failed to convert vulnerability to STIX",
                {"prefix": LOG_PREFIX, "error": str(e)},
            )
            return []
