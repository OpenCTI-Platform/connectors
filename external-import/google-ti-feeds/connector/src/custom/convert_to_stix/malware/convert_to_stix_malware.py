"""Malware family-specific converter for fetching and processing malware family data."""

import logging
from typing import Any

from connector.src.custom.configs import (
    GTIConfig,
)
from connector.src.custom.convert_to_stix.convert_to_stix_base import BaseConvertToSTIX

LOG_PREFIX = "[ConvertToSTIXMalware]"


class ConvertToSTIXMalware(BaseConvertToSTIX):
    """Malware family-specific converter for fetching and processing malware family data."""

    def __init__(self, config: GTIConfig, logger: logging.Logger, tlp_level: str):
        """Initialize Malware Family Converter."""
        super().__init__(config, logger, tlp_level)

    def convert_malware_family_to_stix(self, malware_family_data: Any) -> list[Any]:
        """Convert malware family to location, identity, and malware STIX objects.

        Args:
            malware_family_data: GTIMalwareFamilyData object from fetcher

        Returns:
            list of STIX entities (location, identity, malware)

        """
        try:
            additional_deps = {}
            if hasattr(self.config, "enable_malware_aliases"):
                additional_deps["enable_malware_aliases"] = (
                    self.config.enable_malware_aliases
                )

            converter = self.converter_factory.create_converter_by_name(
                "malware_family", additional_dependencies=additional_deps
            )
            stix_entities = converter.convert_single(malware_family_data)

            if not isinstance(stix_entities, list):
                stix_entities = [stix_entities]

            self.logger.debug(
                "Converted malware family to STIX entities",
                {"prefix": LOG_PREFIX, "entity_count": len(stix_entities)},
            )
            return stix_entities

        except Exception as e:
            self.logger.warning(
                "Failed to convert malware family to STIX",
                {"prefix": LOG_PREFIX, "error": str(e)},
            )
            return []
