"""Module to test the direct malware field import feature end-to-end."""

import json
from os import environ as os_environ
from pathlib import Path
from typing import Any
from uuid import uuid4

import pytest
from conftest import mock_env_vars
from crowdstrike_feeds_connector.report.builder import ReportBundleBuilder
from models.configs.config_loader import ConfigLoader
from stix2 import TLP_AMBER, Bundle, Identity, MarkingDefinition

# =====================
# Fixtures
# =====================


@pytest.fixture
def fake_report_data() -> dict:
    """Load fake report data from JSON file."""
    faker_dir = Path(__file__).parent.parent / "faker"
    with open(faker_dir / "api_report.json", "r") as f:
        return json.load(f)


@pytest.fixture
def author_identity() -> Identity:
    """Fixture for author identity."""
    return Identity(  # pylint: disable=W9101  # it's a test no real ingest
        name="CrowdStrike",
        identity_class="organization",
    )


@pytest.fixture
def tlp_marking() -> MarkingDefinition:
    """Fixture for TLP marking."""
    return TLP_AMBER


@pytest.fixture
def crowdstrike_config_standard() -> dict[str, str]:
    """Fixture for standard CrowdStrike configuration."""
    return {
        "OPENCTI_URL": "http://localhost:8080",
        "OPENCTI_TOKEN": f"{uuid4()}",
        "CONNECTOR_ID": f"{uuid4()}",
        "CONNECTOR_NAME": "CrowdStrike Test",
        "CONNECTOR_SCOPE": "crowdstrike",
        "CROWDSTRIKE_BASE_URL": "https://api.crowdstrike.com",
        "CROWDSTRIKE_CLIENT_ID": f"{uuid4()}",
        "CROWDSTRIKE_CLIENT_SECRET": f"{uuid4()}",
    }


@pytest.fixture
def crowdstrike_config_with_legacy_guess_malware() -> dict[str, str]:
    """Fixture for CrowdStrike configuration with legacy report_guess_malware."""
    return {
        "OPENCTI_URL": "http://localhost:8080",
        "OPENCTI_TOKEN": f"{uuid4()}",
        "CONNECTOR_ID": f"{uuid4()}",
        "CONNECTOR_NAME": "CrowdStrike Test",
        "CONNECTOR_SCOPE": "crowdstrike",
        "CROWDSTRIKE_BASE_URL": "https://api.crowdstrike.com",
        "CROWDSTRIKE_CLIENT_ID": f"{uuid4()}",
        "CROWDSTRIKE_CLIENT_SECRET": f"{uuid4()}",
        # Legacy setting that should be ignored
        "CROWDSTRIKE_REPORT_GUESS_MALWARE": "True",
    }


@pytest.fixture
def mock_related_indicators() -> list:
    """Fixture for mock related indicators."""
    return []


# =====================
# Test Cases
# =====================


# Scenario: Import malware from existing field
@pytest.mark.order(0)
def test_import_malware_from_existing_field(
    crowdstrike_config_standard: dict[str, str],
    fake_report_data: dict,
    author_identity: Identity,
    tlp_marking: MarkingDefinition,
    mock_related_indicators: list,
) -> None:
    """
    Feature: Direct Malware Field Import
      As a Threat Intel Analyst
      I want malware to be imported from the existing malware field in reports
      Because tag-based guessing is inefficient and creates incorrect malware associations

    Scenario: Import malware from existing field
    """
    # Given the Crowdstrike API already provides a malware field in report data
    mock_env, config, report_with_malware = _given_api_provides_malware_field_in_report(
        crowdstrike_config_standard, fake_report_data
    )

    try:
        # When the System imports a report
        bundle = _when_system_imports_report_with_malware(
            config=config,
            report_data=report_with_malware,
            author=author_identity,
            tlp_marking=tlp_marking,
            related_indicators=mock_related_indicators,
        )

        # Then the System should use the existing malware field instead of tags
        _then_system_uses_existing_malware_field(bundle, report_with_malware)

        # And the Threat Intel Analyst should see accurate malware associations
        _then_analyst_sees_accurate_malware_associations(bundle, report_with_malware)
    finally:
        mock_env.stop()


# =====================
# GWT Gherkin-style functions
# =====================


def _given_api_provides_malware_field_in_report(
    config_data: dict[str, str], report_data: dict
) -> tuple[Any, ConfigLoader, dict]:
    """Given the Crowdstrike API already provides a malware field in report data."""
    mock_env = mock_env_vars(os_environ, config_data)
    config = ConfigLoader()

    assert "malware" in report_data  # noqa: S101
    assert len(report_data["malware"]) > 0  # noqa: S101

    return mock_env, config, report_data


def _when_system_imports_report_with_malware(
    config: ConfigLoader,
    report_data: dict,
    author: Identity,
    tlp_marking: MarkingDefinition,
    related_indicators: list,
) -> Bundle:
    """When the System imports a report."""
    malware_from_field = report_data.get("malware", [])

    builder = ReportBundleBuilder(
        report=report_data,
        author=author,
        source_name="CrowdStrike",
        object_markings=[tlp_marking],
        report_status=0,
        report_type="threat-report",
        confidence_level=80,
        # Direct malware from field, not from tag guessing
        malwares_from_field=malware_from_field,
        related_indicators=related_indicators,
    )

    bundle = builder.build()
    return bundle


def _then_system_uses_existing_malware_field(bundle: Bundle, report_data: dict) -> None:
    """Then the System should use the existing malware field instead of tags."""
    malware_entities = [
        obj for obj in bundle.objects if hasattr(obj, "type") and obj.type == "malware"
    ]

    malware_in_report = report_data.get("malware", [])
    assert len(malware_entities) == len(malware_in_report)  # noqa: S101

    malware_names = [m.name for m in malware_entities if hasattr(m, "name")]
    for malware_data in malware_in_report:
        assert malware_data.get("family_name") in malware_names  # noqa: S101


def _then_analyst_sees_accurate_malware_associations(
    bundle: Bundle, report_data: dict
) -> None:
    """And the Threat Intel Analyst should see accurate malware associations."""
    malware_entities = [
        obj for obj in bundle.objects if hasattr(obj, "type") and obj.type == "malware"
    ]

    assert len(malware_entities) > 0  # noqa: S101

    for malware in malware_entities:
        assert hasattr(malware, "name")  # noqa: S101
        assert hasattr(malware, "is_family")  # noqa: S101
        assert malware.is_family  # noqa: S101  # Should be marked as family

    for malware in malware_entities:
        if hasattr(malware, "x_source"):
            assert malware.x_source != "tag_guessing"  # noqa: S101


def _given_admin_used_report_guess_malware_configuration(
    config_data: dict[str, str],
) -> tuple[Any, ConfigLoader]:
    """Given the Admin previously used report_guess_malware configuration."""
    mock_env = mock_env_vars(os_environ, config_data)
    config = ConfigLoader()

    assert not hasattr(config.crowdstrike, "report_guess_malware")  # noqa: S101

    return mock_env, config


def _when_system_is_updated_and_imports_report(
    config: ConfigLoader,
    report_data: dict,
    author: Identity,
    tlp_marking: MarkingDefinition,
    related_indicators: list,
) -> Bundle:
    """When the System is updated."""
    malware_from_field = report_data.get("malware", [])

    builder = ReportBundleBuilder(
        report=report_data,
        author=author,
        source_name="CrowdStrike",
        object_markings=[tlp_marking],
        report_status=0,
        report_type="threat-report",
        confidence_level=80,
        malwares_from_field=malware_from_field,
        related_indicators=related_indicators,
    )

    bundle = builder.build()
    return bundle


def _then_admin_no_longer_sees_configuration_option(config: ConfigLoader) -> None:
    """Then the Admin should no longer see this configuration option."""
    assert not hasattr(config.crowdstrike, "report_guess_malware")  # noqa: S101

    assert not hasattr(config.crowdstrike, "malware_guess_cache")  # noqa: S101


def _then_system_ignores_legacy_configuration_values(
    bundle: Bundle, report_data: dict
) -> None:
    """And the System should ignore any legacy configuration values."""
    malware_entities = [
        obj for obj in bundle.objects if hasattr(obj, "type") and obj.type == "malware"
    ]

    malware_in_report = report_data.get("malware", [])
    assert len(malware_entities) == len(malware_in_report)  # noqa: S101

    for malware in malware_entities:
        if hasattr(malware, "x_processing_method"):
            assert malware.x_processing_method != "tag_guessing"  # noqa: S101
