import datetime
import io
import json
import os
import sys
import time

import magic
import pyzipper
import requests
import stix2
import yaml
from pycti import OpenCTIApiClient, OpenCTIConnectorHelper, get_config_variable


class MalwareBazaarRecentAdditions:
    """
    Process recent additions to Malware Bazaar
    """

    def __init__(self):
        # Instantiate the connector helper from config
        config_file_path = os.path.dirname(os.path.abspath(__file__)) + "/config.yml"
        config = (
            yaml.load(open(config_file_path), Loader=yaml.FullLoader)
            if os.path.isfile(config_file_path)
            else {}
        )
        self.helper = OpenCTIConnectorHelper(config)
        self.identity = self.helper.api.identity.create(
            type="Organization",
            name="MalwareBazaar",
            description="For more info, see https://bazaar.abuse.ch/about/",
        )

        self.api_url = get_config_variable(
            "MALWAREBAZAAR_RECENT_ADDITIONS_API_URL",
            ["malwarebazaar_recent_additions", "api_url"],
            config,
        )

        self.cooldown_seconds = get_config_variable(
            "MALWAREBAZAAR_RECENT_ADDITIONS_COOLDOWN_SECONDS",
            ["malwarebazaar_recent_additions", "cooldown_seconds"],
            config,
        )
        self.cooldown_seconds = int(self.cooldown_seconds)

        self.labels_color = get_config_variable(
            "MALWAREBAZAAR_RECENT_ADDITIONS_LABELS_COLOR",
            ["malwarebazaar_recent_additions", "labels_color"],
            config,
        )

        self.url_base = get_config_variable(
            "OPENCTI_URL",
            ["malwarebazaar_recent_additions", "opencti_url"],
            config,
        )

        self.api_key_opencti = get_config_variable(
            "OPENCTI_TOKEN",
            ["malwarebazaar_recent_additions", "opencti_token"],
            config,
        )

        self.include_tags = get_config_variable(
            "MALWAREBAZAAR_RECENT_ADDITIONS_INCLUDE_TAGS",
            ["malwarebazaar_recent_additions", "include_tags"],
            config,
        )
        if self.include_tags:
            self.include_tags = self.include_tags.split(",")

        self.include_reporters = get_config_variable(
            "MALWAREBAZAAR_RECENT_ADDITIONS_INCLUDE_REPORTERS",
            ["malwarebazaar_recent_additions", "include_reporters"],
            config,
        )
        if self.include_reporters:
            self.include_reporters = self.include_reporters.split(",")

        labels = get_config_variable(
            "MALWAREBAZAAR_RECENT_ADDITIONS_LABELS",
            ["malwarebazaar_recent_additions", "labels"],
            config,
        )
        self.label_ids = []

        # Create default labels
        if labels:
            labels = labels.split(",")
            for label in labels:
                created_label = self.helper.api.label.read_or_create_unchecked(
                    value=label, color=self.labels_color
                )
                if created_label is not None:
                    self.label_ids.append(created_label["id"])

    def run(self):
        self.helper.log_info("Starting MalwareBazaar Recent Additions Connector")
        while True:
            try:
                self.update_state()
                recent_additions_list = self.get_recent_additions()
                for recent_additions_dict in recent_additions_list:
                    self.helper.log_info(f"Processing: {recent_additions_dict}")
                    sha256 = recent_additions_dict["sha256_hash"]
                    reporter = recent_additions_dict["reporter"]
                    file_name = recent_additions_dict["file_name"]
                    tags = (
                        recent_additions_dict["tags"]
                        if recent_additions_dict["tags"]
                        else []
                    )

                    # If the artifact has an excluded tag, skip processing
                    if self.include_reporters:
                        if reporter not in self.include_reporters:
                            self.helper.log_info(
                                f"Skipping {sha256} as it was from a reporter not in the included list: {reporter}"
                            )
                            continue

                    if self.include_tags:
                        if not any(x in tags for x in self.include_tags):
                            self.helper.log_info(
                                f"Skipping {sha256} as it did not contain a tag in the included list."
                            )
                            continue

                    # If the artifact already exists in OpenCTI skip it
                    if self.artifact_exists_opencti(sha256):
                        self.helper.log_info(
                            f'Skipping Artifact with "{sha256}" as it already exists in OpenCTI.'
                        )
                        continue

                    # Download the artifact and unzip with default "infected" password
                    try:
                        file_contents = self.download_unzip(sha256)
                    except:
                        self.helper.log_error(
                            f"Error downloading and unzipping {sha256}."
                        )
                        continue

                    # Upload the artifact to OpenCTI
                    response = self.upload_artifact_opencti(
                        file_name,
                        file_contents,
                        f"Uploaded to MalwareBazaar by Twitter user: {reporter}.",
                    )

                    # Create external reference to MalwareBazaar report
                    external_reference = self.helper.api.external_reference.create(
                        source_name="MalwareBazaar Recent Additions",
                        url=f"https://bazaar.abuse.ch/sample/{sha256}/",
                        description="MalwareBazaar Recent Additions",
                    )
                    self.helper.api.stix_cyber_observable.add_external_reference(
                        id=response["id"],
                        external_reference_id=external_reference["id"],
                    )

                    # Attach all default labels if any
                    for label_id in self.label_ids:
                        self.helper.api.stix_cyber_observable.add_label(
                            id=response["id"], label_id=label_id
                        )

                    # Attach all tags as labels if any
                    for tag in tags:
                        label = self.helper.api.label.read_or_create_unchecked(
                            value=tag,
                            color=self.labels_color,
                        )
                        if label is not None:
                            self.helper.api.stix_cyber_observable.add_label(
                                id=response["id"], label_id=label["id"]
                            )

                    # Creation of the STIX indicator and relationship
                    tags_indicator = tags
                    tags.insert(0, "malware-bazaar")
                    indicator_id = self.create_stix_indicator(sha256, tags_indicator)
                    self.relation_ship(
                        self.url_base,
                        self.api_key_opencti,
                        response["id"],
                        indicator_id,
                    )

            except (KeyboardInterrupt, SystemExit):
                self.helper.log_info("Connector stop")
                sys.exit(0)

            except Exception as e:
                self.helper.log_error(str(e))

            if self.helper.connect_run_and_terminate:
                self.helper.log_info("Connector stop")
                self.helper.force_ping()
                sys.exit(0)

            time.sleep(self.cooldown_seconds)

    def get_recent_additions(self):
        """
        Get recent additions to MalwareBazaar.

        See https://bazaar.abuse.ch/api/#latest_additions

        returns: a dict containing the recent additions in the last
                 60 minutes to MalwareBazaar.
        """

        data = {"query": "get_recent", "selector": "time"}
        resp = requests.post(self.api_url, data=data)

        # Handle the response data

        recent_additions_list = resp.json()

        if "data" in recent_additions_list:
            return recent_additions_list["data"]
        else:
            self.helper.log_error(
                "Key 'data' not found in the response from MalwareBazaar API."
            )
            return []

    def artifact_exists_opencti(self, sha256):
        """
        Determine whether or not an Artifact already exists in OpenCTI.

        sha256: a str representing the sha256 of the artifact's file contents
        returns: a bool indicidating the aforementioned
        """

        custom_attributes = """
            id
            entity_type
        """
        response = self.helper.api.stix_cyber_observable.read(
            filters={
                "mode": "and",
                "filters": [{"key": "hashes.SHA-256", "values": [sha256]}],
                "filterGroups": [],
            },
            customAttributes=custom_attributes,
        )

        if response:
            return True
        return False

    def upload_artifact_opencti(self, file_name, file_contents, description):
        """
        Upload a file to OpenCTI.

        file_name: a str representing the name of the file
        file_contents: a bytes object representing the file contents
        description: a str representing the description for the upload

        returns: response of upload
        """

        mime_type = magic.from_buffer(file_contents, mime=True)

        kwargs = {
            "file_name": file_name,
            "data": file_contents,
            "mime_type": mime_type,
            "x_opencti_description": description,
            "objectMarking": stix2.TLP_WHITE["id"],
        }

        return self.helper.api.stix_cyber_observable.upload_artifact(**kwargs)

    def download_unzip(self, sha256):
        """
        Download and unzip a sample from MalwareBazaar.

        sha256: a str representing the sample's sha256.
        returns: a bytes object containing the contents of the file
        """
        data = {"query": "get_file", "sha256_hash": sha256}
        resp = requests.post(self.api_url, data=data)
        zip_contents = resp.content
        zip_obj = io.BytesIO(zip_contents)
        zip_file = pyzipper.AESZipFile(zip_obj)
        zip_file.setpassword(b"infected")
        file_name = zip_file.namelist()[0]
        return zip_file.read(file_name)

    def update_state(self):
        timestamp = int(time.time())
        interval = self.cooldown_seconds
        new_state = {"last_run": timestamp}

        current_state = self.helper.get_state()
        self.helper.log_info("Actual state: " + json.dumps(current_state, indent=4))

        if current_state is None:
            self.helper.set_state(new_state)
            self.helper.log_info("Initial state: " + json.dumps(new_state))
        else:
            if "last_run" in current_state:
                last_run = current_state["last_run"]
                if timestamp - last_run < interval:
                    self.helper.log_info("Waiting 300 seconds...")
                    return

            current_state["last_run"] = timestamp
            self.helper.set_state(current_state)
            self.helper.log_info("State update: " + json.dumps(current_state))

    def create_stix_indicator(self, sha256, tags="malware-bazaar"):
        """
        Create a STIX indicator for the given sha256.

        sha256: a str representing the sha256 of the artifact

        returns: the created indicator
        """
        url = self.url_base
        token = self.api_key_opencti

        api_client = OpenCTIApiClient(url, token)

        pattern = f"[file:hashes.'SHA-256' = '{sha256}']"
        valid_from = (
            datetime.datetime.now(datetime.timezone.utc)
            .isoformat(timespec="milliseconds")
            .replace("+00:00", "Z")
        )

        indicator = api_client.indicator.create(
            name=f"{sha256}",
            description=f"Indicator for hash SHA256 {sha256}",
            pattern=pattern,
            pattern_type="stix",
            valid_from=valid_from,
            x_opencti_main_observable_type="Artifact",
            objectLabel=tags,
        )

        if indicator:
            self.helper.log_info(f"Indicator with {sha256} created in OpenCTI.")
            indicator_id = indicator["id"]
            return indicator_id
        else:
            self.helper.log_error("Error creating indicator in OpenCTI.")

    def relation_ship(self, url, token, artifact_id, indicator_id):
        api_client = OpenCTIApiClient(url, token)

        relation = api_client.stix_core_relationship.create(
            fromType="Artifact",
            fromId=artifact_id,
            toType="Indicator",
            toId=indicator_id,
            relationship_type="related-to",
            description="Relationship between artifact and indicator.",
            first_seen=datetime.datetime.now(datetime.timezone.utc)
            .isoformat(timespec="milliseconds")
            .replace("+00:00", "Z"),
            last_seen=datetime.datetime.now(datetime.timezone.utc)
            .isoformat(timespec="milliseconds")
            .replace("+00:00", "Z"),
        )

        if relation:
            self.helper.log_info(f"Relation {relation["id"]} created in OpenCTI.")
        else:
            self.helper.log_info("Error creating relation in OpenCTI.")


if __name__ == "__main__":
    try:
        malwarebazaar_recent_additions = MalwareBazaarRecentAdditions()
        malwarebazaar_recent_additions.run()
    except Exception as e:
        print(e)
        time.sleep(10)
        sys.exit(0)
