import json
from pycti import OpenCTIConnectorHelper

class VendorIntel:

    def __init__(self) -> None:
        self.helper = OpenCTIConnectorHelper()

    def extract_triage(self,observable_id,data):
        
        #add external reference
        external_reference = {
            "source_name": "Hatching Triage",
            "url": data["link"],
            
            "description": "Hatching Triage Report found on MalwareBazar",
        }
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference=external_reference
        )

    def extract_cape(self,observable_id,data):
        external_reference = {
            "source_name": "CAPE Sandbox",
            "url": data["link"],
            "description": "CAPE Sandbox Report found on MalwareBazar",
        }
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference=external_reference
        )


    def extract_unpacme(self,observable_id,data):
        external_reference = {
            "source_name": "UnpacMe",
            "url": data["link"],
            "description": "UnpacMe Report found on MalwareBazar",
        }
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference=external_reference
        )


    def extract_vmray(self,observable_id,data):
        external_reference = {
            "source_name": "VMRay",
            "url": data["report_link"],
            "description": "VMRay Report found on MalwareBazar",
        }
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference=external_reference
        )

        pass

    def extract_intezer(self,observable_id,data):
        external_reference = {
            "source_name": "Intezer",
            "url": data["analysis_url"],
            "description": "Intezer Report found on MalwareBazar",
        }
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference=external_reference
        )


    def extract_vxcube(self,observable_id,data):
        pass

    def extract_anyrun(self,observable_id,data):
        external_reference = {
            "source_name": "ANY.RUN",
            "url": data["analysis_url"],
            "description": "ANY.RUN Report found on MalwareBazar",
        }
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference=external_reference
        )

    def extract_filescanio(self,observable_id,data):
        external_reference = {
            "source_name": "Filescan.io",
            "url": data["report_link"],
            "description": "Filescan.io Report found on MalwareBazar",
        }
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference=external_reference
        )

