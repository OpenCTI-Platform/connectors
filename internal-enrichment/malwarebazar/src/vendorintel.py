import json
from pycti import OpenCTIConnectorHelper

class VendorIntel:

    def __init__(self,config) -> None:
        self.helper = OpenCTIConnectorHelper(config)

    def extract_triage(self,observable_id,data):
        external_reference=self.helper.api.external_reference.create(
            source_name="Hatching Triage",
            url=data["link"],
            description="Hatching Triage Report found on MalwareBazar",
        )
        
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )

    def extract_cape(self,observable_id,data):
        external_reference = self.helper.api.external_reference.create(
            source_name="CAPE Sandbox",
            url=data["link"],
            description="CAPE Sandbox Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )



    def extract_unpacme(self,observable_id,data):
        external_reference = self.helper.api.external_reference.create(
            source_name="UnpacMe",
            url=data[0]["link"],
            description="UnpacMe Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )



    def extract_vmray(self,observable_id,data):
        external_reference = self.helper.api.external_reference.create(
            source_name="VMRay",
            url=data["report_link"],
            description="VMRay Report found on MalwareBazar",
        )
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )



    def extract_intezer(self,observable_id,data):

        external_reference = self.helper.api.external_reference.create(
            source_name="Intezer",
            url=data["analysis_url"],
            description="Intezer Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )



    def extract_vxcube(self,observable_id,data):
        pass

    def extract_anyrun(self,observable_id,data):

        external_reference = self.helper.api.external_reference.create(
            source_name="ANY.RUN",
            url=data["analysis_url"],
            description="ANY.RUN Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )


    def extract_filescanio(self,observable_id,data):

        external_reference = self.helper.api.external_reference.create(
            source_name="Filescan.io",
            url=data["report_link"],
            description="Filescan.io Report found on MalwareBazar",
        )

        self.helper.api.stix_cyber_observable.add_external_reference(
            id=observable_id, external_reference_id=external_reference["id"]
        )


