# coding: utf-8

import os
import sys
import time
from datetime import datetime
import requests

import requests
import stix2
import yaml
from pycti import (
    AttackPattern,
    OpenCTIConnectorHelper,
    StixCoreRelationship,
    get_config_variable,
)
from threading import Lock
from vendorintel import VendorIntel

class Bazar:

    def __init__(self) -> None:
        config_file_path = os.path.dirname(os.path.abspath(__file__)) + "/config.yml"
        config = (
            yaml.load(open(config_file_path), Loader=yaml.FullLoader)
            if os.path.isfile(config_file_path)
            else {}
        )
        
        self.helper = OpenCTIConnectorHelper(config)
        self.api_url = get_config_variable("API_URL", config)
        #TODO
        #get current epoch time
        self.latest_request_timestamp = datetime.now()
        self.labels_color = get_config_variable("LABELS_COLOR", config)
        self.vendor_list=["Triage","CAPE","UnpacMe","VMRay","Intezer","vxCube","ANY.RUN","FileScan-IO"] #TODO: make this an environment variable
        self.vendor_intel=VendorIntel()

    def mark_as_enriched(self,observable,tag='SUCCESS'):
        self.helper.log_info("Marking observable as enriched...")
        tag_ha = self.helper.api.label.create(value="BAZAR_ENRICH_{}".format(tag), color="#0059f7")
        self.helper.api.stix_cyber_observable.add_label(id=observable["id"], label_id=tag_ha["id"])
        #add the enrichment tag

    def add_vendor_intel(self,observable,data):
        for vendor in self.vendor_list:
            if vendor in data:
                vendor_data = data[vendor]
                if vendor_data:
                    match vendor:
                        case "Triage":
                            self.vendor_intel.extract_triage(observable["id"],vendor_data)
                        case "CAPE":
                            self.vendor_intel.extract_cape(observable["id"],vendor_data)
                        case "UnpacMe":
                            self.vendor_intel.extract_unpacme(observable["id"],vendor_data)
                        case "VMRay":
                            self.vendor_intel.extract_vmray(observable["id"],vendor_data)
                        case "Intezer":
                            self.vendor_intel.extract_intezer(observable["id"],vendor_data)
                        case "vxCube":
                            self.vendor_intel.extract_vxcube(observable["id"],vendor_data)
                        case "ANY.RUN":
                            self.vendor_intel.extract_anyrun(observable["id"],vendor_data)
                        case "FileScan-IO":
                            self.vendor_intel.extract_filescanio(observable["id"],vendor_data)
                        case _: #default      
                            self.helper.log_error("Unknown vendor: {}".format(vendor))

        pass
    
    def _send_knowledge(self,observable,data):
        bundle_objects=[]
        final_observable=observable
        final_observable = self.helper.api.stix_cyber_observable.update_field(
                id=final_observable["id"],
                input={"key": "hashes.MD5", "value": data["md5_hash"]},
            )
        final_observable = self.helper.api.stix_cyber_observable.update_field(
            id=final_observable["id"],
            input={"key": "hashes.SHA-1", "value": data["sha1_hash"]},
            )
        final_observable = self.helper.api.stix_cyber_observable.update_field(
            id=final_observable["id"],
            input={"key": "hashes.SHA-256","value": data["sha256_hash"],},
            )
        #create external reference
        external_reference = self.helper.api.external_reference.create(
            source_name="MalwareBazar",
            url="https://bazaar.abuse.ch/sample/" + data["sha256_hash"],
            external_id=data["sha256_hash"],
            description="MalwareBazar Enrichment",
            )
        
        self.helper.api.stix_cyber_observable.add_external_reference(
            id=final_observable["id"], external_reference_id=external_reference["id"]
        )

        #add labels
        for label in data["tags"]:
            label = self.helper.api.label.create(
                value=label,
                color=self.labels_color,
                description="MalwareBazar Enrichment",
            )
            self.helper.api.stix_cyber_observable.add_label(
                id=final_observable["id"], label_id=label["id"]
            )
        
       #update size of file
        final_observable = self.helper.api.stix_cyber_observable.update_field(
            id=final_observable["id"],
            input={"key": "size", "value": str(data["file_size"])},
        )

        #add vendor intel
        

        final_observable = self.add_vendor_intel(final_observable,data["vendor_intel"])

        return "Enriched observable at time " + str(datetime.now()) + " with data from MalwareBazar"

    
    def _process_observable(self,observable):
        self.helper.log_info(
            "Processing the observable " + observable["observable_value"]
        )
        #TODO
        result=[]
        if observable['entity_type'] in ["StixFile","Artifact"]:
            response=requests.post(
                self.api_url,
                data={"query":"get_info","hash":observable['observable_value']},
            )
            if response.status_code == 200:
                response_data=response.json()
                if response_data['query_status'] == "ok":
                    data=response_data['data']
                    self.mark_as_enriched(observable,tag='SUCCESS')
                    return self._send_knowledge(observable,data[0])
                    
                else:
                    self.mark_as_enriched(observable,tag='FAILURE')
                    raise ValueError(response_data['query_status'])

                
            elif response.status_code > 299:
                self.mark_as_enriched(observable,tag='FAILURE')
                raise ValueError(response.text)
            else:
                self.mark_as_enriched(observable,tag='FAILURE')
                raise ValueError("Unknown error")
        
        else:
            pass

    def _process_message(self,data,type="observable"):
        if type == "observable":
            entity_id = data["entity_id"]
            observable = self.helper.api.stix_cyber_observable.read(id=entity_id)
            if observable is None:
                raise ValueError(
                    "Observable not found "
                    "(may be linked to data seggregation, check your group and permissions)"
                )
            return self._process_observable(observable)
        else:#if type == "indicator":
            pass
        
        #TODO
    
    def start(self):
        self.helper.listen(self._process_message)
    

if __name__ == "__main__":
    try:
        bazar = Bazar()
        bazar.start()
    except Exception as e:
        print(e)
        time.sleep(10)
        sys.exit(0)
