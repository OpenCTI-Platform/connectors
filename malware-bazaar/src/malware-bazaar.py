import yaml
import os
import requests
import json

from pycti import OpenCTIConnectorHelper, get_config_variable


class MalwareBazaarConnector:
    def __init__(self):
        # Instantiate the connector helper from config
        config_file_path = os.path.dirname(os.path.abspath(__file__)) + "/config.yml"
        config = (
            yaml.load(open(config_file_path), Loader=yaml.FullLoader)
            if os.path.isfile(config_file_path)
            else {}
        )
        self.helper = OpenCTIConnectorHelper(config)
        self.token = get_config_variable(
            "MALWARE_BAZAAR_TOKEN", ["malware_bazaar", "token"], config
        )
        self.max_tlp = get_config_variable(
            "MALWARE_BAZAAR_MAX_TLP", ["malware_bazaar", "max_tlp"], config
        )
        self.api_url = "https://mb-api.abuse.ch/api/v1/"

    def _process_file(self, observable):
        marking_definitions = observable["markingDefinitionsIds"]
        created_by_ref_id = (
            observable["createdByRef"]["id"]
            if observable["createdByRef"] is not None
            and "id" in observable["createdByRef"]
            else None
        )
        response = requests.post(
            self.api_url,
            data={
                'query':'get_info',
                'hash':observable["observable_value"]
            }
        )
        json_data = json.loads(response.text)
        if json_data["query_status"] != 'ok':
            raise ValueError(json_data["query_status"])
        if "data" in json_data:
            data = json_data["data"]
            attributes = data[0]
            created_observables = []
            # Create observables
            # MD5
            md5 = self.helper.api.stix_observable.create(
                type="File-MD5",
                observable_value=attributes["md5_hash"],
                markingDefinitions=marking_definitions,
                createdByRef=created_by_ref_id,
            )
            created_observables.append(md5["id"])
            # SHA1
            sha1 = self.helper.api.stix_observable.create(
                type="File-SHA1",
                observable_value=attributes["sha1_hash"],
                markingDefinitions=marking_definitions,
                createdByRef=created_by_ref_id,
            )
            created_observables.append(sha1["id"])
            # SHA256
            sha256 = self.helper.api.stix_observable.create(
                type="File-SHA256",
                observable_value=attributes["sha256_hash"],
                markingDefinitions=marking_definitions,
                createdByRef=created_by_ref_id,
            )
            created_observables.append(sha256["id"])
            # Names
            # for name in attributes["names"]:
            file_name = self.helper.api.stix_observable.create(
                type="File-Name",
                observable_value=attributes['file_name'],
                markingDefinitions=marking_definitions,
                createdByRef=created_by_ref_id,
            )
            created_observables.append(file_name["id"])
            self.helper.api.stix_observable_relation.create(
                fromId=md5["id"],
                fromType="File-MD5",
                toId=file_name["id"],
                toType="File-Name",
                relationship_type="corresponds",
                ignore_dates=True,
            )
            self.helper.api.stix_observable_relation.create(
                fromId=sha1["id"],
                fromType="File-SHA1",
                toId=file_name["id"],
                toType="File-Name",
                relationship_type="corresponds",
                ignore_dates=True,
            )
            self.helper.api.stix_observable_relation.create(
                fromId=sha256["id"],
                fromType="File-SHA256",
                toId=file_name["id"],
                toType="File-Name",
                relationship_type="corresponds",
                ignore_dates=True,
            )

            # Create observables relation
            self.helper.api.stix_observable_relation.create(
                fromId=md5["id"],
                fromType="File-MD5",
                toId=sha1["id"],
                toType="File-SHA1",
                relationship_type="corresponds",
                ignore_dates=True,
            )
            self.helper.api.stix_observable_relation.create(
                fromId=md5["id"],
                fromType="File-MD5",
                toId=sha256["id"],
                toType="File-SHA256",
                relationship_type="corresponds",
                ignore_dates=True,
            )
            self.helper.api.stix_observable_relation.create(
                fromId=sha1["id"],
                fromType="File-SHA1",
                toId=sha256["id"],
                toType="File-SHA256",
                relationship_type="corresponds",
                ignore_dates=True,
            )

            # Create external reference
            external_reference = self.helper.api.external_reference.create(
                source_name="MalwareBazaar",
                url="https://bazaar.abuse.ch/sample/" + attributes["sha256_hash"],
                # description=attributes["magic"],
            )

            # Create tags
            for tag in attributes["tags"]:
                tag_mb = self.helper.api.tag.create(
                    tag_type="MalwareBazaar", value=tag, color="#3583b1",
                )
                print(tag_mb)
                for created_observable in created_observables:
                    self.helper.api.stix_entity.add_tag(
                        id=created_observable, tag_id=tag_mb["id"]
                    )

            for created_observable in created_observables:
                self.helper.api.stix_entity.add_external_reference(
                    id=created_observable,
                    external_reference_id=external_reference["id"],
                )

            return ["File found on Malware Bazaar, knowledge attached."]

    def _process_message(self, data):
        entity_id = data["entity_id"]
        observable = self.helper.api.stix_observable.read(id=entity_id)
        # Extract TLP
        tlp = "TLP:WHITE"
        for marking_definition in observable["markingDefinitions"]:
            if marking_definition["definition_type"] == "TLP":
                tlp = marking_definition["definition"]

        if not OpenCTIConnectorHelper.check_max_tlp(tlp, self.max_tlp):
            raise ValueError(
                "Do not send any data, TLP of the observable is greater than MAX TLP"
            )

        observable_type = observable["entity_type"]
        if "file" in observable_type:
            return self._process_file(observable)

    # Start the main loop
    def start(self):
        self.helper.listen(self._process_message)


if __name__ == "__main__":
    malwareBazaarInstance = MalwareBazaarConnector()
    malwareBazaarInstance.start()
