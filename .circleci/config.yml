#file: noinspection YAMLSchemaValidation
version: 2.1
setup: true
orbs:
  slack: circleci/slack@4.15.0
  continuation: circleci/continuation@1.1.0

executors:
  ci_environment:
    parameters:
      tags:
        type: string
        default: "rolling"
        description: Image tags
    environment:
      BUILD_TAGS: <<parameters.tags>>
    docker:
      - image: cimg/python:3.11
  ci_notifications:
    docker:
      - image: "cimg/base:stable"


jobs:
  ensure_formatting:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          name: install dependencies
          command: pip install -r ci-requirements.txt --user
      - run:
          name: run isort check
          command: isort --profile black --check .
      - run:
          name: run black check
          command: black --check .
      - slack/notify:
          event: fail
          template: basic_fail_1
  base_linter:
    docker:
      - image: alpine/flake8:7.3.0
    working_directory: ~/repo
    steps:
      - checkout
      - run: apk update && apk upgrade && apk --no-cache add curl gettext
      - run:
          name: flake8
          command: flake8 --ignore=E,W ~/repo
      - slack/notify:
          event: fail
          template: basic_fail_1
  linter:
    docker:
      - image: cimg/python:3.12
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          name: install dependencies
          command: pip install -r ./shared/pylint_plugins/check_stix_plugin/requirements.txt
      - run:
          name: pylint
          command: cd ./shared/pylint_plugins/check_stix_plugin && PYTHONPATH=. python -m pylint ../../../ --disable=all --enable=no_generated_id_stix,no-value-for-parameter,unused-import --load-plugins linter_stix_id_generator
      - slack/notify:
          event: fail
          template: basic_fail_1
  build_manifest:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Build Manifest for XTM composer
          command: bash ./shared/tools/composer/generate_connectors_manifest.sh
      - run:
          name: Commit Manifest if changed
          command: |
            git config credential.helper 'cache --timeout=120'
            git config user.email "automation@filigran.io"
            git config user.name "Filigran Automation"
            manifest_changed=$(git diff manifest.json)
            flag_detected=$(git log -1 --pretty=%B | grep '\[ci build-manifest\]' || echo "")
            if [ -n "$manifest_changed" ] && [ -z "$flag_detected" ] ; then
              echo "Manifest changed. Committing changes..."
              git add .
              # Add custom flag to avoid triggering workflows
              git commit -m "[Automation] Build and update manifest [ci build-manifest]"
              # Push quietly to prevent showing the token in log
              git push -q https://${GITHUB_TOKEN}@github.com/OpenCTI-Platform/connectors.git ${CIRCLE_BRANCH}   
            else
              echo "Manifest not changed. Skipping commit."
              exit 0
            fi
      - run:
          name: Skip steps if flag detected
          command: |
            if git log -1 --pretty=%B | grep -q '\[ci build-manifest\]'; then
              echo "Skipping steps due to [ci build-manifest] flag."
              exit 0
            fi
  test:
    docker:
      - image: cimg/python:3.11
    working_directory: ~/repo
    parallelism: 4
    steps:
      - checkout
      - run: | 
          sudo apt-get update -qq 
          sudo apt install -y \
            curl \
            gettext-base \
            libcairo2-dev libpango1.0-dev  # for internal-export-file/export-report-pdf tests (weasyprint)
      - run:
          name: install dependencies
          command: pip install -r ci-requirements.txt --user
      - run:
          name: Run tests
          command: |
            set -euo pipefail
            circleci tests glob "**/test-requirements.txt" \
              | circleci tests run \
                  --split-by=timings \
                  --command="xargs bash run_test.sh"
        # Save JUnit so CircleCI can show pass/fail per connector and build timings history
      - store_test_results:
          path: test_outputs

      # Save logs/reports as downloadable artifacts
      - store_artifacts:
          path: test_outputs
  build:
    parameters:
      ci_executor:
        type: executor
        description: Executor to use for this job.
        default: ci_environment
    executor: << parameters.ci_executor >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: pip install -r .circleci/scripts/requirements.txt
      - run:
          name: Execute Python Script
          command: python .circleci/scripts/generate_ci.py
      - continuation/continue:
          configuration_path: dynamic.yml
      - slack/notify:
          event: fail
          template: basic_fail_1
  notify:
    parameters:
      notification_executor:
        type: executor
        description: Executor to use for this job.
        default: ci_notifications
    executor: << parameters.notification_executor >>
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - slack/notify:
          event: pass
          template: basic_success_1

workflows:
  connectors:
    jobs:
      - ensure_formatting:
          filters:
              tags:
                only: /.*/
      - base_linter:
          filters:
            tags:
              only: /.*/
      - linter:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
      - build:
          name: "build_release"
          ci_executor:
            name: ci_environment
            tags: "latest"
          requires:
            - ensure_formatting
            - base_linter
            - linter
            - test
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - build:
          name: "build_prerelease"
          ci_executor:
            name: ci_environment
            tags: "prerelease"
          requires:
            - ensure_formatting
            - base_linter
            - linter
            - test
          filters:
            branches:
              only:
                - /release\/.*/
      - build:
          name: "build_rolling"
          ci_executor:
            name: ci_environment
            tags: "rolling"
          requires:
            - ensure_formatting
            - base_linter
            - linter
            - test
          filters:
            branches:
              only:
                - master
      - notify:
          name: "send_notifications_release"
          notification_executor:
            name: ci_notifications
          requires:
            - build_release
          filters:
            tags:
              only: /.*/
      - notify:
          name: "send_notifications_rolling"
          notification_executor:
            name: ci_notifications
          requires:
            - build_rolling
          filters:
            tags:
              only: /.*/
      - notify:
          name: "send_notifications_prerelease"
          notification_executor:
            name: ci_notifications
          requires:
            - build_prerelease
          filters:
            tags:
              only: /.*/
      - build_manifest:
          filters:
            branches:
              only:
                - oob/connector_manager